{"version":3,"sources":["../../src/pages/chat/chat.module.ts","../../src/pages/chat/chat.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAyC;AACO;AACd;AAWlC;IAAA;IAA6B,CAAC;IAAjB,cAAc;QAR1B,+DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,uDAAQ;aACT;YACD,OAAO,EAAE;gBACP,sEAAe,CAAC,QAAQ,CAAC,uDAAQ,CAAC;aACnC;SACD,CAAC;OACU,cAAc,CAAG;IAAD,qBAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;ACZ8C;AAgBzE;IAAA;IAqNE,CAAC;IAnNH,qCAAqC;IACrC,6BAA6B;IAC7B,0CAA0C;IAC1C,uDAAuD;IACvD,sBAAsB;IAGtB,oBAAoB;IACpB,6BAA6B;IAC7B,iBAAiB;IACjB,sBAAsB;IACtB,mBAAmB;IACnB,sBAAsB;IAGtB,6CAA6C;IAC7C,yCAAyC;IACzC,gCAAgC;IAChC,gDAAgD;IAIhD,mEAAmE;IACnE,+CAA+C;IAE/C,6DAA6D;IAC7D,uCAAuC;IACvC,6DAA6D;IAC7D,oBAAoB;IACpB,6IAA6I;IAC7I,UAAU;IACV,wDAAwD;IACxD,oBAAoB;IACpB,yCAAyC;IACzC,+BAA+B;IAC/B,WAAW;IACX,qDAAqD;IAIrD,yEAAyE;IACzE,sCAAsC;IACtC,gCAAgC;IAChC,YAAY;IAGZ,QAAQ;IAER,sBAAsB;IACtB,sDAAsD;IACtD,6DAA6D;IAC7D,iCAAiC;IACjC,cAAc;IACd,WAAW;IACX,2BAA2B;IAC3B,QAAQ;IACJ,2BAAQ,GAAR;IACA,CAAC;IA3DQ,QAAQ;QAJpB,gEAAS,CAAC;YACT,QAAQ,EAAE,WAAW;UACG;SACzB,CAAC;OACW,QAAQ,CAqNlB;IAAD,CAAC;AAAA;SArNU,QAAQ,e","file":"29.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { IonicPageModule } from 'ionic-angular';\r\nimport { ChatPage } from './chat';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ChatPage,\r\n  ],\r\n  imports: [\r\n    IonicPageModule.forChild(ChatPage),\r\n  ],\r\n })\r\nexport class ChatPageModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/chat/chat.module.ts","\r\nimport { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\r\nimport { NavParams, Events, Content, IonicPage } from 'ionic-angular';\r\n\r\n\r\nimport io from 'socket.io-client';\r\nimport { ServicesProvider } from '../../providers/services/services';\r\nimport { Config } from '../../config';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\n\r\n@IonicPage({\r\n  segment:'page-chat/id/:id'\r\n})\r\n@Component({\r\n  selector: 'page-chat',\r\n  templateUrl: 'chat.html',\r\n})\r\nexport class ChatPage  implements OnInit {\r\n\r\n//   itemsSubscription: Subscription;\r\n//   chatHistoryListing: any;\r\n//   @ViewChild(Content) content: Content;\r\n//   @ViewChild('chat_input') messageInput: ElementRef;\r\n//   msgList: any= [];\r\n\r\n\r\n//   editorMsg = '';\r\n//   showEmojiPicker = false;\r\n//   socket: any;\r\n//   userList: any=[];\r\n//   User :any= {};\r\n//   remoteuser:any=[]\r\n\r\n\r\n//   constructor(public navParams: NavParams,\r\n//     private service: ServicesProvider,\r\n//     private events: Events) {\r\n//       // Get the navParams toUserId parameter\r\n\r\n\r\n\r\n//       this.User =JSON.parse(localStorage.getItem('userdetails'))\r\n//       this.remoteuser=this.navParams.data.id\r\n\r\n//       console.log('====================================');\r\n//       console.log( this.remoteuser);\r\n//       console.log('====================================');\r\n//       var param={\r\n//         query: 'userid=' +  this.User._id + '&sessionid=' + localStorage.getItem('token')  + '&chatToken=' + localStorage.getItem('token')\r\n//       }\r\n//       this.socket = io(Config.SOCKET_ENDPOINT,param);\r\n//       var obj = {\r\n//         remoteuserid: this.remoteuser,\r\n//         userid:this.User._id\r\n//       };\r\n//       this.socket.emit('peerConnectRequest', obj);\r\n\r\n\r\n\r\n//      this.itemsSubscription= this.getMessages().subscribe(message => {\r\n//         this.msgList.push(message);\r\n//         this.scrollToBottom()\r\n//       });\r\n    \r\n \r\n//     }\r\n\r\n//     getMessages() {\r\n//       let observable = new Observable(observer => {\r\n//         this.socket.on('chatReciveRemoteuser', (data) => {\r\n//           observer.next(data);\r\n//         });\r\n//       })\r\n//       return observable;\r\n//     }\r\n    ngOnInit() {\r\n    }\r\n\r\n//     ionViewWillLeave() {\r\n//       // unsubscribe\r\n//     }\r\n\r\n//     ionViewDidEnter() {\r\n//       //get message list\r\n//       this.getMsg();\r\n\r\n//       // Subscribe to received  new message events\r\n//     }\r\n\r\n//     onFocus() {\r\n//       this.showEmojiPicker = false;\r\n//       this.content.resize();\r\n//       this.scrollToBottom();\r\n//     }\r\n\r\n//     switchEmojiPicker() {\r\n//       this.showEmojiPicker = !this.showEmojiPicker;\r\n//       if (!this.showEmojiPicker) {\r\n//         this.focus();\r\n//       } else {\r\n//         this.setTextareaScroll();\r\n//       }\r\n//       this.content.resize();\r\n//       this.scrollToBottom();\r\n//     }\r\n\r\n//     /**\r\n//     * @name getMsg\r\n//     * @returns {Promise<ChatMessage[]>}\r\n//     */\r\n//     getMsg() {\r\n//       var obj={\r\n//         page:1,\r\n//         remoteuserid:this.remoteuser\r\n//       }\r\n\r\n\r\n\r\n\r\n//       this.service.getChatHistory(obj).subscribe((response)=>{\r\n//         var chatHistory=[],senderImage\r\n//         if (response.success) {\r\n//           // load chat\r\n//           for (var i = 0; i < response.Chats.length; i++) {\r\n\r\n\r\n//             var data = {\r\n//               chatid: response.Chats[i]._id,\r\n//               remoteuserid: response.Chats[i].remoteUserId,\r\n//               userid: response.Chats[i].userId,\r\n//               chat: response.Chats[i].chatText,\r\n//               attachment: response.Chats[i].attachment,\r\n//               size: response.Chats[i].size,\r\n//               filename: response.Chats[i].chatFileName,\r\n//               type: 'text',\r\n//               progressshow: 0,\r\n//               time:response.Chats[i].chatDate,\r\n//               randomid: response.Chats[i].randomid,\r\n//               receiver_seen: response.Chats[i].receiver_seen,\r\n//               senderImage:senderImage\r\n\r\n\r\n//             };\r\n\r\n// console.log('====================================')\r\n// console.log(data)\r\n// console.log('====================================')\r\n//             this.msgList.push(data);\r\n\r\n//           }\r\n//         }\r\n\r\n//          this.scrollToBottom();\r\n//       },(Error)=>{\r\n//       })\r\n\r\n\r\n\r\n//     }\r\n\r\n//     /**\r\n//     * @name sendMsg\r\n//     */\r\n//     sendMsg() {\r\n//       if (!this.editorMsg.trim()) return;\r\n//       if (!this.showEmojiPicker) {\r\n//         this.focus();\r\n//       }\r\n\r\n\r\n//       var data = {\r\n//         remoteuserid:this.remoteuser._id,\r\n//         username: 'chatuser_name',\r\n//         userid:this.User._id,\r\n//         chat:this.editorMsg,\r\n//         type: \"text\",\r\n//         attachment: \"\",\r\n//         progress: 0,\r\n//         socketid: '',\r\n//         time: Date(),\r\n//         jsonWebToken:localStorage.getItem('token'),\r\n//         sender_seen: 'yes',\r\n//         receiver_seen: 'no',\r\n//         randomid: Math.random(),\r\n//         senderImage:this.User.profile_image\r\n//       };\r\n//       this.socket.emit('sendchat', data);\r\n// this.editorMsg=''\r\n// this.msgList.push(data)\r\n// this.scrollToBottom()\r\n//     }\r\n\r\n//     /**\r\n//     * @name pushNewMsg\r\n//     * @param msg\r\n//     */\r\n//     pushNewMsg(msg) {\r\n//       const userId = this.user.id,\r\n//       toUserId = this.toUser.id;\r\n//       // Verify user relationships\r\n//       if (msg.userId === userId && msg.toUserId === toUserId) {\r\n//         this.msgList.push(msg);\r\n//       } else if (msg.toUserId === userId && msg.userId === toUserId) {\r\n//         this.msgList.push(msg);\r\n//       }\r\n//       this.scrollToBottom();\r\n//     }\r\n\r\n//     getMsgIndexById(id: string) {\r\n//       return this.msgList.findIndex(e => e.messageId === id)\r\n//     }\r\n\r\n//     scrollToBottom() {\r\n//       setTimeout(() => {\r\n//         if (this.content.scrollToBottom) {\r\n//           this.content.scrollToBottom();\r\n//         }\r\n//       }, 400)\r\n//     }\r\n\r\n//     private focus() {\r\n//       if (this.messageInput && this.messageInput.nativeElement) {\r\n//         this.messageInput.nativeElement.focus();\r\n//       }\r\n//     }\r\n\r\n//     private setTextareaScroll() {\r\n//       const textarea = this.messageInput.nativeElement;\r\n//       textarea.scrollTop = textarea.scrollHeight;\r\n//     }\r\n  }\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/chat/chat.ts"],"sourceRoot":""}