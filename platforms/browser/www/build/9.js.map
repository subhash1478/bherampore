{"version":3,"sources":["../../src/pages/profile/profile.module.ts","../../node_modules/@ionic-native/google-maps/index.js","../../src/pages/profile/profile.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAyC;AACO;AACR;AACgB;AAUpB;AAUpC;IAAA;IAAgC,CAAC;IAApB,iBAAiB;QAT7B,+DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,6DAAW;aACZ;YACD,SAAS,EAAC,CAAC,6EAAU,EAAC,8EAAW,CAAC;YAClC,OAAO,EAAE;gBACP,sEAAe,CAAC,QAAQ,CAAC,6DAAW,CAAC;aACtC;SACF,CAAC;OACW,iBAAiB,CAAG;IAAD,wBAAC;CAAA;AAAH;;;;;;;;;ACvB9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AAC2C;AACuG;AACrG;AACN;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,yBAAyB;AACzB,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B;AAC3B,kBAAkB;AAClB;AACA;AACA;AACA,2BAA2B;AAC3B,kBAAkB;AAClB;AACA,0BAA0B,QAAQ;AAClC;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA,uBAAuB;AACvB;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA,QAAQ,4EAAgB;AACxB;AACA;AACA;AACA,QAAQ,4EAAgB;AACxB;AACA;AACA;AACA,QAAQ,4EAAgB;AACxB;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,CAAC;AACuB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,yBAAyB;AACzB,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B;AAC3B,kBAAkB;AAClB;AACA;AACA;AACA,2BAA2B;AAC3B,kBAAkB;AAClB;AACA,0BAA0B,QAAQ;AAClC;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA,uBAAuB,QAAQ;AAC/B;AACA,QAAQ,4EAAgB;AACxB;AACA;AACA;AACA,QAAQ,4EAAgB;AACxB;AACA;AACA;AACA,QAAQ,4EAAgB;AACxB;AACA;AACA;AACA,QAAQ,4EAAgB;AACxB;AACA;AACA;AACA,QAAQ,4EAAgB;AACxB;AACA;AACA;AACA,QAAQ,4EAAgB;AACxB;AACA;AACA;AACA,QAAQ,4EAAgB;AACxB;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,CAAC;AACwB;AACzB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,WAAW,YAAY;AACvB;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,kBAAkB;AAClB,cAAc;AACd;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C,uBAAuB,iBAAiB;AACxC,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C,yBAAyB,iBAAiB;AAC1C,kBAAkB;AAClB;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C,yBAAyB,iBAAiB;AAC1C,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C,uBAAuB,kBAAkB;AACzC,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C,yBAAyB,kBAAkB;AAC3C,kBAAkB;AAClB;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C,yBAAyB,kBAAkB;AAC3C,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,yDAAU,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,sBAAsB;AACtB,kBAAkB;AAClB;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0EAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC,CAAC,6EAAiB;AACG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,OAAO;AAChC,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,OAAO;AAClC,kBAAkB;AAClB;AACA;AACA;AACA,2BAA2B,OAAO;AAClC,kBAAkB;AAClB;AACA;AACA;AACA,mBAAmB,2DAAU;AAC7B;AACA;AACA,gCAAgC,uBAAuB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,yBAAyB,OAAO;AAChC,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,OAAO;AAClC,kBAAkB;AAClB;AACA;AACA;AACA,2BAA2B,OAAO;AAClC,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,uBAAuB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,uBAAuB;AACvB,0BAA0B,QAAQ;AAClC;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,uBAAuB;AACvB,0BAA0B,QAAQ;AAClC;AACA,qCAAqC;AACrC;AACA;AACA,mBAAmB,OAAO;AAC1B,sBAAsB,IAAI;AAC1B,0BAA0B,OAAO;AACjC,yBAAyB,QAAQ;AACjC;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,wBAAwB,IAAI;AAC5B,4BAA4B,OAAO;AACnC,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,wBAAwB,IAAI;AAC5B,4BAA4B,OAAO;AACnC,2BAA2B,QAAQ;AACnC;AACA,iDAAiD;AACjD;AACA;AACA,mBAAmB,OAAO;AAC1B,gBAAgB;AAChB;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,kBAAkB;AAClB;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,kBAAkB;AAClB;AACA;AACA;AACA,mBAAmB,2DAAU;AAC7B;AACA;AACA,gCAAgC,uBAAuB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,gBAAgB;AAChB;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,kBAAkB;AAClB;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,uBAAuB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,yBAAyB,OAAO;AAChC,0BAA0B,IAAI;AAC9B;AACA;AACA;AACA,2BAA2B,OAAO;AAClC,4BAA4B,IAAI;AAChC;AACA;AACA;AACA,2BAA2B,OAAO;AAClC,4BAA4B,IAAI;AAChC;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,OAAO;AAChC,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC,0BAA0B,SAAS;AACnC;AACA,oCAAoC;AACpC;AACA;AACA;AACA,yBAAyB,OAAO;AAChC,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC,0BAA0B,SAAS;AACnC;AACA,oCAAoC;AACpC;AACA,QAAQ,iFAAa,EAAE,mBAAmB;AAC1C;AACA;AACA,wCAAwC,2DAAU;AAClD;AACA;AACA,QAAQ,iFAAa;AACrB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,iFAAa,EAAE,mBAAmB;AAC1C;AACA;AACA,wCAAwC,2DAAU;AAClD;AACA;AACA,QAAQ,iFAAa;AACrB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,gFAAY,EAAE,aAAa;AACnC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0EAAM;AACd;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACoB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,QAAQ;AACjC;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA,yBAAyB;AACzB;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,oBAAoB;AACpB;AACA,mBAAmB;AACnB;AACA;AACA,kBAAkB;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB;AACpB,kBAAkB;AAClB;AACA;AACA;AACA,oBAAoB;AACpB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kBAAkB;AAClB,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA,oBAAoB;AACpB,kBAAkB,cAAc;AAChC;AACA;AACA;AACA;AACA,oBAAoB;AACpB,kBAAkB,cAAc;AAChC;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA,kBAAkB;AAClB,wBAAwB;AACxB,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA,oBAAoB;AACpB,0BAA0B;AAC1B,kBAAkB,aAAa;AAC/B;AACA;AACA;AACA;AACA,oBAAoB;AACpB,0BAA0B;AAC1B,kBAAkB,aAAa;AAC/B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB,wBAAwB;AACxB,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA,oBAAoB;AACpB,0BAA0B;AAC1B,kBAAkB,aAAa;AAC/B;AACA;AACA;AACA,oBAAoB;AACpB,0BAA0B;AAC1B,kBAAkB,aAAa;AAC/B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB,gBAAgB,IAAI;AACpB;AACA;AACA;AACA,oBAAoB;AACpB,kBAAkB,IAAI;AACtB;AACA;AACA;AACA,oBAAoB;AACpB,kBAAkB,IAAI;AACtB;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA,kBAAkB;AAClB,wBAAwB;AACxB,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA,oBAAoB;AACpB,0BAA0B;AAC1B,kBAAkB,aAAa;AAC/B;AACA;AACA;AACA,oBAAoB;AACpB,0BAA0B;AAC1B,kBAAkB,aAAa;AAC/B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,qBAAqB;AACrB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB;AACvB,kBAAkB;AAClB;AACA;AACA;AACA,uBAAuB;AACvB,kBAAkB;AAClB;AACA,sBAAsB;AACtB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,uBAAuB;AACvB,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB;AACzB,kBAAkB;AAClB;AACA;AACA;AACA,yBAAyB;AACzB,kBAAkB;AAClB;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,qBAAqB;AACrB,uBAAuB;AACvB,yBAAyB,QAAQ;AACjC,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB;AACvB,yBAAyB;AACzB,2BAA2B,QAAQ;AACnC,kBAAkB;AAClB;AACA;AACA;AACA,uBAAuB;AACvB,yBAAyB;AACzB,2BAA2B,QAAQ;AACnC,kBAAkB;AAClB;AACA,yCAAyC;AACzC;AACA;AACA,yBAAyB,QAAQ;AACjC,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC,kBAAkB;AAClB;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC,kBAAkB;AAClB;AACA,yBAAyB,QAAQ;AACjC;AACA;AACA,uBAAuB;AACvB,yBAAyB,QAAQ;AACjC;AACA;AACA;AACA,yBAAyB;AACzB,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA,yBAAyB;AACzB,2BAA2B,QAAQ;AACnC;AACA,kCAAkC;AAClC;AACA;AACA,qBAAqB;AACrB,yBAAyB,QAAQ;AACjC;AACA;AACA;AACA,uBAAuB;AACvB,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA,uBAAuB;AACvB,2BAA2B,QAAQ;AACnC;AACA,gCAAgC,QAAQ;AACxC;AACA;AACA,qBAAqB;AACrB,uBAAuB;AACvB,yBAAyB,QAAQ;AACjC;AACA;AACA;AACA,uBAAuB;AACvB,yBAAyB;AACzB,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA,uBAAuB;AACvB,yBAAyB;AACzB,2BAA2B,QAAQ;AACnC;AACA,yCAAyC;AACzC;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,gFAAY;AACpB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,gFAAY;AACpB;AACA;AACA;AACA;AACA;AACA,QAAQ,gFAAY;AACpB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,gFAAY;AACpB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0EAAM;AACd;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACyB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA,uBAAuB;AACvB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA,uBAAuB;AACvB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,uBAAuB;AACvB;AACA,sBAAsB;AACtB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,4BAA4B;AAC5B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,4BAA4B;AAC5B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,0BAA0B;AAC1B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA,uBAAuB;AACvB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,wBAAwB;AACxB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,CAAC;AACiB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,+EAA+E,sBAAsB,EAAE;AACvG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0EAAM;AACd;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACsB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B,gBAAgB;AAChB;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC,kBAAkB;AAClB;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0EAAM;AACd;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACmB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,QAAQ,0EAAM;AACd;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AAC0B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B,0BAA0B,OAAO;AACjC,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,OAAO;AAChC,4BAA4B,OAAO;AACnC,kBAAkB;AAClB;AACA;AACA;AACA,yBAAyB,OAAO;AAChC,4BAA4B,OAAO;AACnC,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,gBAAgB;AAChB;AACA;AACA;AACA,sBAAsB,yCAAyC;AAC/D,kBAAkB;AAClB;AACA;AACA;AACA,sBAAsB,yCAAyC;AAC/D,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0EAAM;AACd;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACmB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,oBAAoB;AACpB,gBAAgB;AAChB;AACA;AACA;AACA,0BAA0B;AAC1B,sBAAsB;AACtB,kBAAkB;AAClB;AACA;AACA;AACA,0BAA0B;AAC1B,sBAAsB;AACtB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,oBAAoB;AACpB,gBAAgB;AAChB;AACA;AACA;AACA,0BAA0B;AAC1B,sBAAsB;AACtB,kBAAkB;AAClB;AACA;AACA;AACA,0BAA0B;AAC1B,sBAAsB;AACtB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0EAAM;AACd;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACe;AAChyBAAyB;AACzB,yBAAyB;AACzB,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B;AAC3B,2BAA2B;AAC3B,kBAAkB;AAClB;AACA;AACA;AACA,2BAA2B;AAC3B,2BAA2B;AAC3B,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,wBAAwB;AACxB,uBAAuB;AACvB,gBAAgB;AAChB;AACA;AACA;AACA,sBAAsB;AACtB,0BAA0B;AAC1B,yBAAyB;AACzB,kBAAkB;AAClB;AACA;AACA;AACA,sBAAsB;AACtB,0BAA0B;AAC1B,yBAAyB;AACzB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,QAAQ;AAC1B,wBAAwB,OAAO;AAC/B,uBAAuB,OAAO;AAC9B,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B,0BAA0B,OAAO;AACjC,yBAAyB,OAAO;AAChC,kBAAkB;AAClB;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B,0BAA0B,OAAO;AACjC,yBAAyB,OAAO;AAChC,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,gBAAgB;AAChB;AACA;AACA;AACA,sBAAsB;AACtB,kBAAkB;AAClB;AACA;AACA;AACA,sBAAsB;AACtB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,gBAAgB;AAChB;AACA;AACA;AACA,sBAAsB,yCAAyC;AAC/D,kBAAkB;AAClB;AACA;AACA;AACA,sBAAsB,yCAAyC;AAC/D,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,gBAAgB;AAChB;AACA;AACA;AACA,sBAAsB,yCAAyC;AAC/D,kBAAkB;AAClB;AACA;AACA;AACA,sBAAsB,yCAAyC;AAC/D,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,kBAAkB;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,sBAAsB;AACtB,oBAAoB;AACpB,kBAAkB;AAClB;AACA;AACA;AACA,sBAAsB;AACtB,oBAAoB;AACpB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B,kBAAkB,QAAQ;AAC1B,wBAAwB,OAAO;AAC/B,gBAAgB;AAChB;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B,oBAAoB,QAAQ;AAC5B,0BAA0B,OAAO;AACjC,kBAAkB;AAClB;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B,oBAAoB,QAAQ;AAC5B,0BAA0B,OAAO;AACjC,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0EAAM;AACd;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACoB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qFAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,8BAA8B;AAC9B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,8BAA8B;AAC9B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,8BAA8B;AAC9B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,8BAA8B;AAC9B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,sDAAsD,kBAAkB,EAAE;AAC1E,SAAS;AACT;AACA;AACA,QAAQ,mFAAe;AACvB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe;AACvB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0EAAM;AACd;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AAC6B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qFAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,0BAA0B;AAC1B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,+BAA+B,QAAQ;AACvC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,+BAA+B,QAAQ;AACvC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA,uBAAuB;AACvB;AACA;AACA,yBAAyB,OAAO;AAChC;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA,0BAA0B;AAC1B;AACA;AACA,yBAAyB,OAAO;AAChC;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA,0BAA0B;AAC1B;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,wBAAwB;AACxB;AACA;AACA,iBAAiB;AACjB,iBAAiB;AACjB;AACA;AACA;AACA,mBAAmB;AACnB,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB,mBAAmB;AACnB;AACA,qBAAqB;AACrB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,4BAA4B;AAC5B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,sDAAsD,kBAAkB,EAAE;AAC1E,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,qDAAqD,kBAAkB,EAAE;AACzE,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,wBAAwB;AACxB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,wBAAwB;AACxB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,wBAAwB;AACxB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,wBAAwB;AACxB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,wBAAwB;AACxB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,wBAAwB;AACxB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,wBAAwB;AACxB;AACA;AACA,mBAAmB;AACnB,qBAAqB;AACrB,oBAAoB;AACpB,sBAAsB;AACtB;AACA;AACA;AACA,qBAAqB;AACrB,uBAAuB;AACvB,sBAAsB;AACtB,wBAAwB;AACxB;AACA;AACA;AACA,qBAAqB;AACrB,uBAAuB;AACvB,sBAAsB;AACtB,wBAAwB;AACxB;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,uBAAuB,cAAc;AACrC,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,cAAc;AACvC,kBAAkB;AAClB;AACA;AACA;AACA,yBAAyB,cAAc;AACvC,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,uBAAuB,cAAc;AACrC,iBAAiB;AACjB;AACA;AACA;AACA,yBAAyB,cAAc;AACvC,mBAAmB;AACnB;AACA;AACA;AACA,yBAAyB,cAAc;AACvC,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C,kBAAkB;AAClB;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C,iBAAiB;AACjB;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C,mBAAmB;AACnB;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,cAAc;AACvC,kBAAkB;AAClB;AACA;AACA;AACA,yBAAyB,cAAc;AACvC,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,uBAAuB,cAAc;AACrC,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,cAAc;AACvC,kBAAkB;AAClB;AACA;AACA;AACA,yBAAyB,cAAc;AACvC,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,eAAe;AACxC,kBAAkB;AAClB;AACA;AACA;AACA,yBAAyB,eAAe;AACxC,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,uBAAuB,eAAe;AACtC,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,eAAe;AACxC,kBAAkB;AAClB;AACA;AACA;AACA,yBAAyB,eAAe;AACxC,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,gBAAgB;AACzC,kBAAkB;AAClB;AACA;AACA;AACA,yBAAyB,gBAAgB;AACzC,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,gBAAgB;AACzC,kBAAkB;AAClB;AACA;AACA;AACA,yBAAyB,gBAAgB;AACzC,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,mBAAmB;AAC5C,kBAAkB;AAClB;AACA;AACA;AACA,yBAAyB,mBAAmB;AAC5C,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,mBAAmB;AAC5C,kBAAkB;AAClB;AACA;AACA;AACA,yBAAyB,mBAAmB;AAC5C,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C,kBAAkB;AAClB;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C,kBAAkB;AAClB;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,kBAAkB;AAC3C,kBAAkB;AAClB;AACA;AACA;AACA,yBAAyB,kBAAkB;AAC3C,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,iBAAiB;AAC1C,kBAAkB;AAClB;AACA;AACA;AACA,yBAAyB,iBAAiB;AAC1C,kBAAkB;AAClB;AACA,wBAAwB,QAAQ;AAChC;AACA,QAAQ,iFAAa;AACrB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe;AACvB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe;AACvB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe;AACvB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe;AACvB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe;AACvB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe;AACvB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe;AACvB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe;AACvB;AACA;AACA;AACA;AACA;AACA,QAAQ,iFAAa;AACrB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe;AACvB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe;AACvB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe;AACvB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,iFAAa;AACrB;AACA;AACA;AACA;AACA;AACA,QAAQ,iFAAa;AACrB;AACA;AACA;AACA;AACA;AACA,QAAQ,iFAAa;AACrB;AACA;AACA;AACA;AACA;AACA,QAAQ,iFAAa;AACrB;AACA;AACA;AACA;AACA;AACA,QAAQ,iFAAa;AACrB;AACA;AACA;AACA;AACA;AACA,QAAQ,iFAAa;AACrB;AACA;AACA;AACA;AACA;AACA,QAAQ,iFAAa;AACrB;AACA;AACA;AACA;AACA;AACA,QAAQ,iFAAa;AACrB;AACA;AACA;AACA;AACA;AACA,QAAQ,iFAAa;AACrB;AACA;AACA;AACA;AACA;AACA,QAAQ,iFAAa;AACrB;AACA;AACA;AACA;AACA;AACA,QAAQ,iFAAa;AACrB;AACA;AACA;AACA;AACA;AACA,QAAQ,iFAAa;AACrB;AACA;AACA;AACA;AACA;AACA,QAAQ,iFAAa;AACrB;AACA;AACA;AACA;AACA;AACA,QAAQ,iFAAa;AACrB;AACA;AACA;AACA;AACA;AACA,QAAQ,iFAAa;AACrB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0EAAM;AACd;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACoB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA,uBAAuB;AACvB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA,0BAA0B,OAAO;AACjC;AACA;AACA;AACA,0BAA0B,OAAO;AACjC;AACA,yBAAyB;AACzB;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,wBAAwB;AACxB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,0BAA0B;AAC1B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,wBAAwB;AACxB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,uBAAuB;AACvB;AACA,sBAAsB;AACtB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,gFAAY;AACpB;AACA;AACA;AACA;AACA;AACA,CAAC;AACwB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,uBAAuB;AACvB;AACA,sBAAsB;AACtB;AACA;AACA,uBAAuB,IAAI;AAC3B,2BAA2B,IAAI;AAC/B;AACA;AACA;AACA,yBAAyB,IAAI;AAC7B,6BAA6B,IAAI;AACjC;AACA;AACA;AACA,yBAAyB,IAAI;AAC7B,6BAA6B,IAAI;AACjC;AACA,oCAAoC;AACpC;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,QAAQ,mFAAe;AACvB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe;AACvB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe;AACvB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0EAAM;AACd;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACyB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,0BAA0B;AAC1B;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA,gCAAgC;AAChC;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,uBAAuB;AACvB;AACA,sBAAsB;AACtB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,wBAAwB;AACxB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA,sBAAsB;AACtB;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA,kBAAkB,OAAO;AACzB;AACA;AACA;AACA,kBAAkB,OAAO;AACzB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA,uBAAuB;AACvB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,0BAA0B;AAC1B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,sBAAsB;AACtB;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,yBAAyB;AACzB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,gFAAY;AACpB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,CAAC;AACiB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,sBAAsB,cAAc;AACpC,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA,wBAAwB,cAAc;AACtC,6BAA6B,QAAQ;AACrC;AACA;AACA;AACA,wBAAwB,cAAc;AACtC,6BAA6B,QAAQ;AACrC;AACA,mCAAmC;AACnC;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,yBAAyB,gBAAgB;AACzC;AACA;AACA;AACA,yBAAyB,gBAAgB;AACzC;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,kBAAkB;AACnC;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,iFAAa;AACrB;AACA;AACA;AACA;AACA;AACA,CAAC;AACwB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA,uBAAuB;AACvB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,uBAAuB;AACvB;AACA,sBAAsB;AACtB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,0BAA0B;AAC1B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,4BAA4B;AAC5B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,wBAAwB;AACxB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA,uBAAuB;AACvB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,yBAAyB;AACzB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,gFAAY;AACpB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,gFAAY;AACpB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,iFAAa;AACrB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,CAAC;AACkB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA,uBAAuB;AACvB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,wBAAwB;AACxB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,0BAA0B;AAC1B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,4BAA4B;AAC5B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,4BAA4B;AAC5B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,uBAAuB;AACvB;AACA,sBAAsB;AACtB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,gFAAY;AACpB;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,iFAAa;AACrB;AACA;AACA;AACA;AACA;AACA,CAAC;AACmB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA,uBAAuB;AACvB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wBAAwB;AACxB;AACA,uBAAuB;AACvB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,wBAAwB;AACxB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,wBAAwB;AACxB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,gFAAY;AACpB;AACA;AACA;AACA;AACA;AACA,CAAC;AACsB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,wBAAwB;AACxB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,0BAA0B;AAC1B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,mFAAe,EAAE,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQ,iFAAa;AACrB;AACA;AACA;AACA;AACA;AACA,CAAC;AACqB;AACtB,iC;;;;;;;;;;;;;;;;;;;;;;ACp8M0C;AACe;AACD;AAYrB;AAEnC;;;;;GAKG;AAOH;IAGE,qBAAmB,OAAsB,EAAS,SAAoB,EAAU,WAAwB;QAArF,YAAO,GAAP,OAAO,CAAe;QAAS,cAAS,GAAT,SAAS,CAAW;QAAU,gBAAW,GAAX,WAAW,CAAa;QADxG,SAAI,GAAQ,EAAE;IAEd,CAAC;IACD,8BAAQ,GAAR;IAEA,CAAC;IAED,qCAAe,GAAf;QACE,6GAA6G;QAC7G,8CAA8C;QAC9C,IAAI,CAAC,OAAO,EAAE;IAChB,CAAC;IACD,oCAAc,GAAd;QAGE,OAAO,CAAC,GAAG,CAAC,gCAAgC,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACnE,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI;QACrC,IAAI,CAAC,IAAI,GAAG;YACV,IAAI,EAAE,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,QAAQ;YACxC,YAAY,EAAE,MAAM,CAAC,aAAa;YAClC,UAAU,EAAE,EAAE;YACd,UAAU,EAAE,MAAM,CAAC,QAAQ;YAC3B,QAAQ,EAAE,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,OAAO;YACrD,WAAW,EAAE,EAAE;YACf,OAAO,EAAE,MAAM,CAAC,OAAO,GAAG,GAAG,GAAG,MAAM,CAAC,IAAI,GAAG,GAAG,GAAG,MAAM,CAAC,KAAK,GAAG,GAAG,GAAG,MAAM,CAAC,OAAO;YACvF,KAAK,EAAE,MAAM,CAAC,KAAK;YACnB,KAAK,EAAE,MAAM,CAAC,KAAK;YACnB,QAAQ,EAAE,MAAM,CAAC,KAAK;YACtB,QAAQ,EAAE,MAAM,CAAC,QAAQ;YACzB,MAAM,EAAE,MAAM,CAAC,GAAG;SACnB,CAAC;QACF,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;IAExB,CAAC;IACD,6BAAO,GAAP;QAAA,iBA0CC;QAxCC,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAE3D,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAEvC,IAAI,UAAU,GAAqB;YACjC,MAAM,EAAE;gBACN,MAAM,EAAE;oBACN,GAAG,EAAE,QAAQ,CAAC,QAAQ;oBACtB,GAAG,EAAE,QAAQ,CAAC,SAAS;iBACxB;gBACD,IAAI,EAAE,EAAE;gBACR,IAAI,EAAE,EAAE;aACT;SACF,CAAC;QAEF,IAAI,CAAC,GAAG,GAAG,6EAAU,CAAC,MAAM,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;QAEvD,+CAA+C;QAC/C,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,kFAAe,CAAC,SAAS,CAAC;aACpC,IAAI,CAAC;YACJ,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YAE7B,sCAAsC;YACtC,KAAI,CAAC,GAAG,CAAC,SAAS,CAAC;gBACjB,KAAK,EAAE,KAAI,CAAC,IAAI,CAAC,QAAQ;gBACzB,IAAI,EAAE,KAAK;gBACX,SAAS,EAAE,SAAS;gBACpB,QAAQ,EAAE;oBACR,GAAG,EAAE,QAAQ,CAAC,QAAQ;oBACtB,GAAG,EAAE,QAAQ,CAAC,SAAS;iBACxB;aACF,CAAC;iBACC,IAAI,CAAC,gBAAM;gBACV,MAAM,CAAC,EAAE,CAAC,kFAAe,CAAC,YAAY,CAAC;qBACpC,SAAS,CAAC;oBACT,KAAK,CAAC,KAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC5B,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QAEP,CAAC,CAAC,CAAC;IACP,CAAC;IACD,gCAAU,GAAV;QAGE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;IAC3D,CAAC;IACD,8BAAQ,GAAR,UAAS,IAAI;QACX,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IACtC,CAAC;IAtFU,WAAW;QAJvB,gEAAS,CAAC;YACT,QAAQ,EAAE,cAAc;WACG;SAC5B,CAAC;oBAIwG;OAH7F,WAAW,CAuFvB;IAAD,CAAC;AAAA;SAvFY,WAAW,e","file":"9.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { IonicPageModule } from 'ionic-angular';\r\nimport { ProfilePage } from './profile';\r\nimport { Geolocation } from '@ionic-native/geolocation';\r\n\r\nimport {\r\n  GoogleMaps,\r\n  GoogleMap,\r\n  GoogleMapsEvent,\r\n  GoogleMapOptions,\r\n  CameraPosition,\r\n  MarkerOptions,\r\n  Marker\r\n } from '@ionic-native/google-maps';\r\n@NgModule({\r\n  declarations: [\r\n    ProfilePage,\r\n  ],\r\n  providers:[GoogleMaps,Geolocation],\r\n  imports: [\r\n    IonicPageModule.forChild(ProfilePage),\r\n  ],\r\n})\r\nexport class ProfilePageModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/profile/profile.module.ts","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Injectable } from '@angular/core';\nimport { CordovaCheck, CordovaInstance, Plugin, InstanceProperty, InstanceCheck, checkAvailability, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/fromEvent';\n/**\n * @hidden\n */\nvar /**\n * @hidden\n */\nLatLng = (function () {\n    function LatLng(lat, lng) {\n        this.lat = lat;\n        this.lng = lng;\n    }\n    LatLng.prototype.equals = function (other) {\n        return this.lat === other.lat && this.lng === other.lng;\n    };\n    LatLng.prototype.toString = function () {\n        return this.lat + ',' + this.lng;\n    };\n    LatLng.prototype.toUrlValue = function (precision) {\n        precision = precision || 6;\n        return this.lat.toFixed(precision) + ',' + this.lng.toFixed(precision);\n    };\n    return LatLng;\n}());\n/**\n * @hidden\n */\nexport { LatLng };\n/**\n * @hidden\n */\nvar LatLngBounds = (function () {\n    function LatLngBounds(points) {\n        this._objectInstance = new (GoogleMaps.getPlugin()).LatLngBounds(points);\n    }\n    /**\n     * Converts to string\n     * @return {string}\n     */\n    /**\n       * Converts to string\n       * @return {string}\n       */\n    LatLngBounds.prototype.toString = /**\n       * Converts to string\n       * @return {string}\n       */\n    function () { return; };\n    /**\n     * Returns a string of the form \"lat_sw,lng_sw,lat_ne,lng_ne\" for this bounds, where \"sw\" corresponds to the southwest corner of the bounding box, while \"ne\" corresponds to the northeast corner of that box.\n     * @param precision {number}\n     * @return {string}\n     */\n    /**\n       * Returns a string of the form \"lat_sw,lng_sw,lat_ne,lng_ne\" for this bounds, where \"sw\" corresponds to the southwest corner of the bounding box, while \"ne\" corresponds to the northeast corner of that box.\n       * @param precision {number}\n       * @return {string}\n       */\n    LatLngBounds.prototype.toUrlValue = /**\n       * Returns a string of the form \"lat_sw,lng_sw,lat_ne,lng_ne\" for this bounds, where \"sw\" corresponds to the southwest corner of the bounding box, while \"ne\" corresponds to the northeast corner of that box.\n       * @param precision {number}\n       * @return {string}\n       */\n    function (precision) { return; };\n    /**\n     * Extends this bounds to contain the given point.\n     * @param LatLng {ILatLng}\n     */\n    /**\n       * Extends this bounds to contain the given point.\n       * @param LatLng {ILatLng}\n       */\n    LatLngBounds.prototype.extend = /**\n       * Extends this bounds to contain the given point.\n       * @param LatLng {ILatLng}\n       */\n    function (latLng) { };\n    /**\n     * Returns true if the given lat/lng is in this bounds.\n     * @param LatLng {ILatLng}\n     */\n    /**\n       * Returns true if the given lat/lng is in this bounds.\n       * @param LatLng {ILatLng}\n       */\n    LatLngBounds.prototype.contains = /**\n       * Returns true if the given lat/lng is in this bounds.\n       * @param LatLng {ILatLng}\n       */\n    function (LatLng) { return; };\n    /**\n     * Computes the center of this LatLngBounds\n     * @return {LatLng}\n     */\n    /**\n       * Computes the center of this LatLngBounds\n       * @return {LatLng}\n       */\n    LatLngBounds.prototype.getCenter = /**\n       * Computes the center of this LatLngBounds\n       * @return {LatLng}\n       */\n    function () { return; };\n    __decorate([\n        InstanceProperty,\n        __metadata(\"design:type\", Object)\n    ], LatLngBounds.prototype, \"northeast\", void 0);\n    __decorate([\n        InstanceProperty,\n        __metadata(\"design:type\", Object)\n    ], LatLngBounds.prototype, \"southwest\", void 0);\n    __decorate([\n        InstanceProperty,\n        __metadata(\"design:type\", String)\n    ], LatLngBounds.prototype, \"type\", void 0);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", String)\n    ], LatLngBounds.prototype, \"toString\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number]),\n        __metadata(\"design:returntype\", String)\n    ], LatLngBounds.prototype, \"toUrlValue\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], LatLngBounds.prototype, \"extend\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", Boolean)\n    ], LatLngBounds.prototype, \"contains\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", LatLng)\n    ], LatLngBounds.prototype, \"getCenter\", null);\n    return LatLngBounds;\n}());\nexport { LatLngBounds };\n/**\n * @hidden\n */\nvar VisibleRegion = (function () {\n    function VisibleRegion(southwest, northeast, farLeft, farRight, nearLeft, nearRight) {\n        this._objectInstance = new (GoogleMaps.getPlugin()).VisibleRegion(southwest, northeast, farLeft, farRight, nearLeft, nearRight);\n    }\n    /**\n     * Converts to string\n     * @return {string}\n     */\n    /**\n       * Converts to string\n       * @return {string}\n       */\n    VisibleRegion.prototype.toString = /**\n       * Converts to string\n       * @return {string}\n       */\n    function () { return; };\n    /**\n     * Returns a string of the form \"lat_sw,lng_sw,lat_ne,lng_ne\" for this bounds, where \"sw\" corresponds to the southwest corner of the bounding box, while \"ne\" corresponds to the northeast corner of that box.\n     * @param precision {number}\n     * @return {string}\n     */\n    /**\n       * Returns a string of the form \"lat_sw,lng_sw,lat_ne,lng_ne\" for this bounds, where \"sw\" corresponds to the southwest corner of the bounding box, while \"ne\" corresponds to the northeast corner of that box.\n       * @param precision {number}\n       * @return {string}\n       */\n    VisibleRegion.prototype.toUrlValue = /**\n       * Returns a string of the form \"lat_sw,lng_sw,lat_ne,lng_ne\" for this bounds, where \"sw\" corresponds to the southwest corner of the bounding box, while \"ne\" corresponds to the northeast corner of that box.\n       * @param precision {number}\n       * @return {string}\n       */\n    function (precision) { return; };\n    /**\n     * Returns true if the given lat/lng is in this bounds.\n     * @param LatLng {ILatLng}\n     */\n    /**\n       * Returns true if the given lat/lng is in this bounds.\n       * @param LatLng {ILatLng}\n       */\n    VisibleRegion.prototype.contains = /**\n       * Returns true if the given lat/lng is in this bounds.\n       * @param LatLng {ILatLng}\n       */\n    function (LatLng) { return; };\n    __decorate([\n        InstanceProperty,\n        __metadata(\"design:type\", Object)\n    ], VisibleRegion.prototype, \"northeast\", void 0);\n    __decorate([\n        InstanceProperty,\n        __metadata(\"design:type\", Object)\n    ], VisibleRegion.prototype, \"southwest\", void 0);\n    __decorate([\n        InstanceProperty,\n        __metadata(\"design:type\", Object)\n    ], VisibleRegion.prototype, \"farLeft\", void 0);\n    __decorate([\n        InstanceProperty,\n        __metadata(\"design:type\", Object)\n    ], VisibleRegion.prototype, \"farRight\", void 0);\n    __decorate([\n        InstanceProperty,\n        __metadata(\"design:type\", Object)\n    ], VisibleRegion.prototype, \"nearLeft\", void 0);\n    __decorate([\n        InstanceProperty,\n        __metadata(\"design:type\", Object)\n    ], VisibleRegion.prototype, \"nearRight\", void 0);\n    __decorate([\n        InstanceProperty,\n        __metadata(\"design:type\", String)\n    ], VisibleRegion.prototype, \"type\", void 0);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", String)\n    ], VisibleRegion.prototype, \"toString\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number]),\n        __metadata(\"design:returntype\", String)\n    ], VisibleRegion.prototype, \"toUrlValue\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", Boolean)\n    ], VisibleRegion.prototype, \"contains\", null);\n    return VisibleRegion;\n}());\nexport { VisibleRegion };\n/**\n * @hidden\n */\nexport var StreetViewSource = {\n    DEFAULT: 'DEFAULT',\n    OUTDOOR: 'OUTDOOR'\n};\n/**\n * @hidden\n * You can listen to these events where appropriate\n */\nexport var GoogleMapsEvent = {\n    MAP_READY: 'map_ready',\n    MAP_CLICK: 'map_click',\n    MAP_LONG_CLICK: 'map_long_click',\n    POI_CLICK: 'poi_click',\n    MY_LOCATION_CLICK: 'my_location_click',\n    MY_LOCATION_BUTTON_CLICK: 'my_location_button_click',\n    INDOOR_BUILDING_FOCUSED: 'indoor_building_focused',\n    INDOOR_LEVEL_ACTIVATED: 'indoor_level_activated',\n    CAMERA_MOVE_START: 'camera_move_start',\n    CAMERA_MOVE: 'camera_move',\n    CAMERA_MOVE_END: 'camera_move_end',\n    OVERLAY_CLICK: 'overlay_click',\n    POLYGON_CLICK: 'polygon_click',\n    POLYLINE_CLICK: 'polyline_click',\n    CIRCLE_CLICK: 'circle_click',\n    GROUND_OVERLAY_CLICK: 'groundoverlay_click',\n    INFO_CLICK: 'info_click',\n    INFO_LONG_CLICK: 'info_long_click',\n    INFO_CLOSE: 'info_close',\n    INFO_OPEN: 'info_open',\n    MARKER_CLICK: 'marker_click',\n    MARKER_DRAG: 'marker_drag',\n    MARKER_DRAG_START: 'marker_drag_start',\n    MARKER_DRAG_END: 'marker_drag_end',\n    MAP_DRAG: 'map_drag',\n    MAP_DRAG_START: 'map_drag_start',\n    MAP_DRAG_END: 'map_drag_end',\n    KML_CLICK: 'kml_click',\n    PANORAMA_READY: 'panorama_ready',\n    PANORAMA_CAMERA_CHANGE: 'panorama_camera_change',\n    PANORAMA_LOCATION_CHANGE: 'panorama_location_change',\n    PANORAMA_CLICK: 'panorama_click'\n};\n/**\n * @hidden\n */\nexport var GoogleMapsAnimation = {\n    BOUNCE: 'BOUNCE',\n    DROP: 'DROP'\n};\n/**\n * @hidden\n */\nexport var GoogleMapsMapTypeId = {\n    NORMAL: 'MAP_TYPE_NORMAL',\n    ROADMAP: 'MAP_TYPE_NORMAL',\n    SATELLITE: 'MAP_TYPE_SATELLITE',\n    HYBRID: 'MAP_TYPE_HYBRID',\n    TERRAIN: 'MAP_TYPE_TERRAIN',\n    NONE: 'MAP_TYPE_NONE'\n};\n/**\n * @name Google Maps\n * @description\n * This plugin uses the native Google Maps SDK\n * Note: As of Ionic native 4.0, this using the 2.0 version of the google maps plugin. Please make sure your plugin is updated\n * @usage\n * ```typescript\n * import {\n *  GoogleMaps,\n *  GoogleMap,\n *  GoogleMapsEvent,\n *  GoogleMapOptions,\n *  CameraPosition,\n *  MarkerOptions,\n *  Marker\n * } from '@ionic-native/google-maps';\n * import { Component } from \"@angular/core/\";\n *\n * @Component({\n *   selector: 'page-home',\n *   templateUrl: 'home.html'\n * })\n * export class HomePage {\n *   map: GoogleMap;\n *   constructor() { }\n *\n *   ionViewDidLoad() {\n *    this.loadMap();\n *   }\n *\n *  loadMap() {\n *\n *     let mapOptions: GoogleMapOptions = {\n *       camera: {\n *         target: {\n *           lat: 43.0741904,\n *           lng: -89.3809802\n *         },\n *         zoom: 18,\n *         tilt: 30\n *       }\n *     };\n *\n *     this.map = GoogleMaps.create('map_canvas', mapOptions);\n *\n *     // Wait the MAP_READY before using any methods.\n *     this.map.one(GoogleMapsEvent.MAP_READY)\n *       .then(() => {\n *         console.log('Map is ready!');\n *\n *         // Now you can use all methods safely.\n *         this.map.addMarker({\n *             title: 'Ionic',\n *             icon: 'blue',\n *             animation: 'DROP',\n *             position: {\n *               lat: 43.0741904,\n *               lng: -89.3809802\n *             }\n *           })\n *           .then(marker => {\n *             marker.on(GoogleMapsEvent.MARKER_CLICK)\n *               .subscribe(() => {\n *                 alert('clicked');\n *               });\n *           });\n *\n *       });\n *   }\n * }\n *\n * ```\n * @classes\n * GoogleMap\n * Circle\n * Encoding\n * Environment\n * Geocoder\n * GroundOverlay\n * HtmlInfoWindow\n * Geocoder\n * LatLng\n * LatLngBounds\n * Marker\n * MarkerCluster\n * Polygon\n * Polyline\n * Spherical\n * KmlOverlay\n * Poly\n * TileOverlay\n * BaseClass\n * BaseArrayClass\n * @interfaces\n * GoogleMapOptions\n * CameraPosition\n * CircleOptions\n * GeocoderRequest\n * GeocoderResult\n * GroundOverlayOptions\n * ILatLng\n * MarkerIcon\n * MarkerOptions\n * MarkerClusterIcon\n * MarkerClusterOptions\n * MyLocation\n * MyLocationOptions\n * PolygonOptions\n * PolylineOptions\n * TileOverlayOptions\n * KmlOverlayOptions\n * VisibleRegion\n */\nvar GoogleMaps = (function (_super) {\n    __extends(GoogleMaps, _super);\n    function GoogleMaps() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    GoogleMaps_1 = GoogleMaps;\n    /**\n     * Creates a new GoogleMap instance\n     * @param element {string | HTMLElement} Element ID or reference to attach the map to\n     * @param options {GoogleMapOptions} [options] Options\n     * @return {GoogleMap}\n     */\n    /**\n       * Creates a new GoogleMap instance\n       * @param element {string | HTMLElement} Element ID or reference to attach the map to\n       * @param options {GoogleMapOptions} [options] Options\n       * @return {GoogleMap}\n       */\n    GoogleMaps.create = /**\n       * Creates a new GoogleMap instance\n       * @param element {string | HTMLElement} Element ID or reference to attach the map to\n       * @param options {GoogleMapOptions} [options] Options\n       * @return {GoogleMap}\n       */\n    function (element, options) {\n        if (element instanceof HTMLElement) {\n            if (element.getAttribute('__pluginMapId')) {\n                console.error('GoogleMaps', element.tagName + '[__pluginMapId=\\'' + element.getAttribute('__pluginMapId') + '\\'] has already map.');\n                return;\n            }\n        }\n        else if (typeof element === 'object') {\n            options = element;\n            element = null;\n        }\n        var googleMap = new GoogleMap(element, options);\n        googleMap.set('_overlays', {});\n        return googleMap;\n    };\n    /**\n     * @deprecation\n     * @hidden\n     */\n    /**\n       * @deprecation\n       * @hidden\n       */\n    GoogleMaps.prototype.create = /**\n       * @deprecation\n       * @hidden\n       */\n    function (element, options) {\n        console.error('GoogleMaps', '[deprecated] Please use GoogleMaps.create()');\n        return GoogleMaps_1.create(element, options);\n    };\n    /**\n     * Creates a new StreetView instance\n     * @param element {string | HTMLElement} Element ID or reference to attach the map to\n     * @param options {StreetViewOptions} [options] Options\n     * @return {StreetViewPanorama}\n     */\n    /**\n       * Creates a new StreetView instance\n       * @param element {string | HTMLElement} Element ID or reference to attach the map to\n       * @param options {StreetViewOptions} [options] Options\n       * @return {StreetViewPanorama}\n       */\n    GoogleMaps.createPanorama = /**\n       * Creates a new StreetView instance\n       * @param element {string | HTMLElement} Element ID or reference to attach the map to\n       * @param options {StreetViewOptions} [options] Options\n       * @return {StreetViewPanorama}\n       */\n    function (element, options) {\n        if (element instanceof HTMLElement) {\n            if (element.getAttribute('__pluginMapId')) {\n                console.error('GoogleMaps', element.tagName + '[__pluginMapId=\\'' + element.getAttribute('__pluginMapId') + '\\'] has already map.');\n                return;\n            }\n        }\n        return new StreetViewPanorama(element, options);\n    };\n    GoogleMaps.decorators = [\n        { type: Injectable },\n    ];\n    /**\n     * @name Google Maps\n     * @description\n     * This plugin uses the native Google Maps SDK\n     * Note: As of Ionic native 4.0, this using the 2.0 version of the google maps plugin. Please make sure your plugin is updated\n     * @usage\n     * ```typescript\n     * import {\n     *  GoogleMaps,\n     *  GoogleMap,\n     *  GoogleMapsEvent,\n     *  GoogleMapOptions,\n     *  CameraPosition,\n     *  MarkerOptions,\n     *  Marker\n     * } from '@ionic-native/google-maps';\n     * import { Component } from \"@angular/core/\";\n     *\n     * @Component({\n     *   selector: 'page-home',\n     *   templateUrl: 'home.html'\n     * })\n     * export class HomePage {\n     *   map: GoogleMap;\n     *   constructor() { }\n     *\n     *   ionViewDidLoad() {\n     *    this.loadMap();\n     *   }\n     *\n     *  loadMap() {\n     *\n     *     let mapOptions: GoogleMapOptions = {\n     *       camera: {\n     *         target: {\n     *           lat: 43.0741904,\n     *           lng: -89.3809802\n     *         },\n     *         zoom: 18,\n     *         tilt: 30\n     *       }\n     *     };\n     *\n     *     this.map = GoogleMaps.create('map_canvas', mapOptions);\n     *\n     *     // Wait the MAP_READY before using any methods.\n     *     this.map.one(GoogleMapsEvent.MAP_READY)\n     *       .then(() => {\n     *         console.log('Map is ready!');\n     *\n     *         // Now you can use all methods safely.\n     *         this.map.addMarker({\n     *             title: 'Ionic',\n     *             icon: 'blue',\n     *             animation: 'DROP',\n     *             position: {\n     *               lat: 43.0741904,\n     *               lng: -89.3809802\n     *             }\n     *           })\n     *           .then(marker => {\n     *             marker.on(GoogleMapsEvent.MARKER_CLICK)\n     *               .subscribe(() => {\n     *                 alert('clicked');\n     *               });\n     *           });\n     *\n     *       });\n     *   }\n     * }\n     *\n     * ```\n     * @classes\n     * GoogleMap\n     * Circle\n     * Encoding\n     * Environment\n     * Geocoder\n     * GroundOverlay\n     * HtmlInfoWindow\n     * Geocoder\n     * LatLng\n     * LatLngBounds\n     * Marker\n     * MarkerCluster\n     * Polygon\n     * Polyline\n     * Spherical\n     * KmlOverlay\n     * Poly\n     * TileOverlay\n     * BaseClass\n     * BaseArrayClass\n     * @interfaces\n     * GoogleMapOptions\n     * CameraPosition\n     * CircleOptions\n     * GeocoderRequest\n     * GeocoderResult\n     * GroundOverlayOptions\n     * ILatLng\n     * MarkerIcon\n     * MarkerOptions\n     * MarkerClusterIcon\n     * MarkerClusterOptions\n     * MyLocation\n     * MyLocationOptions\n     * PolygonOptions\n     * PolylineOptions\n     * TileOverlayOptions\n     * KmlOverlayOptions\n     * VisibleRegion\n     */\n    GoogleMaps = GoogleMaps_1 = __decorate([\n        Plugin({\n            pluginName: 'GoogleMaps',\n            pluginRef: 'plugin.google.maps',\n            plugin: 'cordova-plugin-googlemaps',\n            repo: 'https://github.com/mapsplugin/cordova-plugin-googlemaps',\n            document: 'https://github.com/mapsplugin/cordova-plugin-googlemaps-doc/blob/master/v2.3.0/README.md',\n            install: 'ionic cordova plugin add cordova-plugin-googlemaps --variable API_KEY_FOR_ANDROID=\"YOUR_ANDROID_API_KEY_IS_HERE\" --variable API_KEY_FOR_IOS=\"YOUR_IOS_API_KEY_IS_HERE\"',\n            installVariables: ['API_KEY_FOR_ANDROID', 'API_KEY_FOR_IOS'],\n            platforms: ['Android', 'iOS', 'Brwoser']\n        })\n    ], GoogleMaps);\n    return GoogleMaps;\n    var GoogleMaps_1;\n}(IonicNativePlugin));\nexport { GoogleMaps };\n/**\n * @hidden\n * https://github.com/mapsplugin/cordova-plugin-googlemaps-doc/blob/master/v2.0.0/class/BaseClass/README.md\n */\nvar BaseClass = (function () {\n    function BaseClass() {\n    }\n    /**\n     * Adds an event listener.\n     * @param eventName {string} event name you want to observe.\n     * @return {Observable<any>}\n     */\n    /**\n       * Adds an event listener.\n       * @param eventName {string} event name you want to observe.\n       * @return {Observable<any>}\n       */\n    BaseClass.prototype.addEventListener = /**\n       * Adds an event listener.\n       * @param eventName {string} event name you want to observe.\n       * @return {Observable<any>}\n       */\n    function (eventName) {\n        var _this = this;\n        return new Observable(function (observer) {\n            _this._objectInstance.on(eventName, function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                if (args[args.length - 1] instanceof GoogleMaps.getPlugin().BaseClass) {\n                    if (args[args.length - 1].type === 'Map' || args[args.length - 1].type === 'StreetViewPanorama') {\n                        args[args.length - 1] = _this;\n                    }\n                    else if (_this instanceof MarkerCluster) {\n                        var overlay = _this.get(args[args.length - 1].getId());\n                        if (!overlay) {\n                            var markerJS = args[args.length - 1];\n                            var markerId_1 = markerJS.getId();\n                            var markerCluster = _this;\n                            overlay = new Marker(markerCluster.getMap(), markerJS);\n                            _this.get('_overlays')[markerId_1] = overlay;\n                            markerJS.one(markerJS.getId() + '_remove', function () {\n                                _this.get('_overlays')[markerId_1] = null;\n                            });\n                        }\n                        args[args.length - 1] = overlay;\n                    }\n                    else {\n                        args[args.length - 1] = _this._objectInstance.getMap().get('_overlays')[args[args.length - 1].getId()];\n                    }\n                }\n                observer.next(args);\n            });\n        });\n    };\n    /**\n     * Adds an event listener that works once.\n     * @param eventName {string} event name you want to observe.\n     * @return {Promise<any>}\n     */\n    /**\n       * Adds an event listener that works once.\n       * @param eventName {string} event name you want to observe.\n       * @return {Promise<any>}\n       */\n    BaseClass.prototype.addListenerOnce = /**\n       * Adds an event listener that works once.\n       * @param eventName {string} event name you want to observe.\n       * @return {Promise<any>}\n       */\n    function (eventName) {\n        var _this = this;\n        return new Promise(function (resolve) {\n            _this._objectInstance.one(eventName, function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                if (args[args.length - 1] instanceof GoogleMaps.getPlugin().BaseClass) {\n                    if (args[args.length - 1].type === 'Map' || args[args.length - 1].type === 'StreetViewPanorama') {\n                        args[args.length - 1] = _this;\n                    }\n                    else if (_this instanceof MarkerCluster) {\n                        var overlay = _this.get(args[args.length - 1].getId());\n                        if (!overlay) {\n                            var markerJS = args[args.length - 1];\n                            var markerId_2 = markerJS.getId();\n                            var markerCluster = _this;\n                            overlay = new Marker(markerCluster.getMap(), markerJS);\n                            _this.get('_overlays')[markerId_2] = overlay;\n                            markerJS.one(markerJS.getId() + '_remove', function () {\n                                _this.get('_overlays')[markerId_2] = null;\n                            });\n                        }\n                        args[args.length - 1] = overlay;\n                    }\n                    else {\n                        args[args.length - 1] = _this._objectInstance.getMap().get('_overlays')[args[args.length - 1].getId()];\n                    }\n                }\n                resolve(args);\n            });\n        });\n    };\n    /**\n     * Gets a value\n     * @param key {any}\n     */\n    /**\n       * Gets a value\n       * @param key {any}\n       */\n    BaseClass.prototype.get = /**\n       * Gets a value\n       * @param key {any}\n       */\n    function (key) { return; };\n    /**\n     * Sets a value\n     * @param key {string} The key name for the value. `(key)_changed` will be fired when you set value through this method.\n     * @param value {any}\n     * @param noNotify {boolean} [options] True if you want to prevent firing the `(key)_changed` event.\n     */\n    /**\n       * Sets a value\n       * @param key {string} The key name for the value. `(key)_changed` will be fired when you set value through this method.\n       * @param value {any}\n       * @param noNotify {boolean} [options] True if you want to prevent firing the `(key)_changed` event.\n       */\n    BaseClass.prototype.set = /**\n       * Sets a value\n       * @param key {string} The key name for the value. `(key)_changed` will be fired when you set value through this method.\n       * @param value {any}\n       * @param noNotify {boolean} [options] True if you want to prevent firing the `(key)_changed` event.\n       */\n    function (key, value, noNotify) { };\n    /**\n     * Bind a key to another object\n     * @param key {string} The property name you want to observe.\n     * @param target {any} The target object you want to observe.\n     * @param targetKey? {string} [options]  The property name you want to observe. If you omit this, the `key` argument is used.\n     * @param noNotify? {boolean} [options] True if you want to prevent `(key)_changed` event when you bind first time, because the internal status is changed from `undefined` to something.\n     */\n    /**\n       * Bind a key to another object\n       * @param key {string} The property name you want to observe.\n       * @param target {any} The target object you want to observe.\n       * @param targetKey? {string} [options]  The property name you want to observe. If you omit this, the `key` argument is used.\n       * @param noNotify? {boolean} [options] True if you want to prevent `(key)_changed` event when you bind first time, because the internal status is changed from `undefined` to something.\n       */\n    BaseClass.prototype.bindTo = /**\n       * Bind a key to another object\n       * @param key {string} The property name you want to observe.\n       * @param target {any} The target object you want to observe.\n       * @param targetKey? {string} [options]  The property name you want to observe. If you omit this, the `key` argument is used.\n       * @param noNotify? {boolean} [options] True if you want to prevent `(key)_changed` event when you bind first time, because the internal status is changed from `undefined` to something.\n       */\n    function (key, target, targetKey, noNotify) { };\n    /**\n     * Alias of `addEventListener`\n     * @param key {string} The property name you want to observe.\n     * @return {Observable<any>}\n     */\n    /**\n       * Alias of `addEventListener`\n       * @param key {string} The property name you want to observe.\n       * @return {Observable<any>}\n       */\n    BaseClass.prototype.on = /**\n       * Alias of `addEventListener`\n       * @param key {string} The property name you want to observe.\n       * @return {Observable<any>}\n       */\n    function (eventName) {\n        var _this = this;\n        return new Observable(function (observer) {\n            _this._objectInstance.on(eventName, function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                if (args[args.length - 1] instanceof GoogleMaps.getPlugin().BaseClass) {\n                    if (args[args.length - 1].type === 'Map' || args[args.length - 1].type === 'StreetViewPanorama') {\n                        args[args.length - 1] = _this;\n                    }\n                    else if (_this instanceof MarkerCluster) {\n                        var overlay = _this.get(args[args.length - 1].getId());\n                        if (!overlay) {\n                            var markerJS = args[args.length - 1];\n                            var markerId_3 = markerJS.getId();\n                            var markerCluster = _this;\n                            overlay = new Marker(markerCluster.getMap(), markerJS);\n                            _this.get('_overlays')[markerId_3] = overlay;\n                            markerJS.one(markerJS.getId() + '_remove', function () {\n                                _this.get('_overlays')[markerId_3] = null;\n                            });\n                        }\n                        args[args.length - 1] = overlay;\n                    }\n                    else {\n                        args[args.length - 1] = _this._objectInstance.getMap().get('_overlays')[args[args.length - 1].getId()];\n                    }\n                }\n                observer.next(args);\n            });\n        });\n    };\n    /**\n     * Alias of `addEventListenerOnce`\n     * @param key {string} The property name you want to observe.\n     * @return {Promise<any>}\n     */\n    /**\n       * Alias of `addEventListenerOnce`\n       * @param key {string} The property name you want to observe.\n       * @return {Promise<any>}\n       */\n    BaseClass.prototype.one = /**\n       * Alias of `addEventListenerOnce`\n       * @param key {string} The property name you want to observe.\n       * @return {Promise<any>}\n       */\n    function (eventName) {\n        var _this = this;\n        return new Promise(function (resolve) {\n            _this._objectInstance.one(eventName, function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                if (args[args.length - 1] instanceof GoogleMaps.getPlugin().BaseClass) {\n                    if (args[args.length - 1].type === 'Map' || args[args.length - 1].type === 'StreetViewPanorama') {\n                        args[args.length - 1] = _this;\n                    }\n                    else if (_this instanceof MarkerCluster) {\n                        var overlay = _this.get(args[args.length - 1].getId());\n                        if (!overlay) {\n                            var markerJS = args[args.length - 1];\n                            var markerId_4 = markerJS.getId();\n                            var markerCluster = _this;\n                            overlay = new Marker(markerCluster.getMap(), markerJS);\n                            _this.get('_overlays')[markerId_4] = overlay;\n                            markerJS.one(markerJS.getId() + '_remove', function () {\n                                _this.get('_overlays')[markerId_4] = null;\n                            });\n                        }\n                        args[args.length - 1] = overlay;\n                    }\n                    else {\n                        args[args.length - 1] = _this._objectInstance.getMap().get('_overlays')[args[args.length - 1].getId()];\n                    }\n                }\n                resolve(args);\n            });\n        });\n    };\n    /**\n     * Clears all stored values\n     */\n    /**\n       * Clears all stored values\n       */\n    BaseClass.prototype.empty = /**\n       * Clears all stored values\n       */\n    function () { };\n    /**\n     * Dispatch event.\n     * @param eventName {string} Event name\n     * @param parameters {any} [options] The data you want to pass to event listerners.\n     */\n    /**\n       * Dispatch event.\n       * @param eventName {string} Event name\n       * @param parameters {any} [options] The data you want to pass to event listerners.\n       */\n    BaseClass.prototype.trigger = /**\n       * Dispatch event.\n       * @param eventName {string} Event name\n       * @param parameters {any} [options] The data you want to pass to event listerners.\n       */\n    function (eventName) {\n        var parameters = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            parameters[_i - 1] = arguments[_i];\n        }\n    };\n    /**\n     * Executes off() and empty()\n     */\n    /**\n       * Executes off() and empty()\n       */\n    BaseClass.prototype.destroy = /**\n       * Executes off() and empty()\n       */\n    function () {\n        if (this._objectInstance.type === 'Map') {\n            var map = this._objectInstance.getMap();\n            if (map) {\n                delete this._objectInstance.getMap().get('_overlays')[this._objectInstance.getId()];\n            }\n        }\n        this._objectInstance.remove();\n    };\n    /**\n     * Remove event listener(s)\n     * The `removeEventListener()` has three usages:\n     *  - removeEventListener(\"eventName\", listenerFunction);\n     *     This removes one particular event listener\n     *  - removeEventListener(\"eventName\");\n     *     This removes the event listeners that added for the event name.\n     *  - removeEventListener();\n     *     This removes all listeners.\n     *\n     * @param eventName {string} [options] Event name\n     * @param listener {Function} [options] Event listener\n     */\n    /**\n       * Remove event listener(s)\n       * The `removeEventListener()` has three usages:\n       *  - removeEventListener(\"eventName\", listenerFunction);\n       *     This removes one particular event listener\n       *  - removeEventListener(\"eventName\");\n       *     This removes the event listeners that added for the event name.\n       *  - removeEventListener();\n       *     This removes all listeners.\n       *\n       * @param eventName {string} [options] Event name\n       * @param listener {Function} [options] Event listener\n       */\n    BaseClass.prototype.removeEventListener = /**\n       * Remove event listener(s)\n       * The `removeEventListener()` has three usages:\n       *  - removeEventListener(\"eventName\", listenerFunction);\n       *     This removes one particular event listener\n       *  - removeEventListener(\"eventName\");\n       *     This removes the event listeners that added for the event name.\n       *  - removeEventListener();\n       *     This removes all listeners.\n       *\n       * @param eventName {string} [options] Event name\n       * @param listener {Function} [options] Event listener\n       */\n    function (eventName, listener) { };\n    /**\n     * Alias of `removeEventListener`\n     *\n     * @param eventName {string} [options] Event name\n     * @param listener {Function} [options] Event listener\n     */\n    /**\n       * Alias of `removeEventListener`\n       *\n       * @param eventName {string} [options] Event name\n       * @param listener {Function} [options] Event listener\n       */\n    BaseClass.prototype.off = /**\n       * Alias of `removeEventListener`\n       *\n       * @param eventName {string} [options] Event name\n       * @param listener {Function} [options] Event listener\n       */\n    function (eventName, listener) { };\n    __decorate([\n        InstanceCheck({ observable: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String]),\n        __metadata(\"design:returntype\", Observable)\n    ], BaseClass.prototype, \"addEventListener\", null);\n    __decorate([\n        InstanceCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String]),\n        __metadata(\"design:returntype\", Promise)\n    ], BaseClass.prototype, \"addListenerOnce\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String]),\n        __metadata(\"design:returntype\", Object)\n    ], BaseClass.prototype, \"get\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String, Object, Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], BaseClass.prototype, \"set\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String, Object, String, Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], BaseClass.prototype, \"bindTo\", null);\n    __decorate([\n        InstanceCheck({ observable: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String]),\n        __metadata(\"design:returntype\", Observable)\n    ], BaseClass.prototype, \"on\", null);\n    __decorate([\n        InstanceCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String]),\n        __metadata(\"design:returntype\", Promise)\n    ], BaseClass.prototype, \"one\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], BaseClass.prototype, \"empty\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String, Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], BaseClass.prototype, \"trigger\", null);\n    __decorate([\n        CordovaCheck({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], BaseClass.prototype, \"destroy\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String, Function]),\n        __metadata(\"design:returntype\", void 0)\n    ], BaseClass.prototype, \"removeEventListener\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String, Function]),\n        __metadata(\"design:returntype\", void 0)\n    ], BaseClass.prototype, \"off\", null);\n    /**\n     * @hidden\n     * https://github.com/mapsplugin/cordova-plugin-googlemaps-doc/blob/master/v2.0.0/class/BaseClass/README.md\n     */\n    BaseClass = __decorate([\n        Plugin({\n            plugin: 'cordova-plugin-googlemaps',\n            pluginName: 'GoogleMaps',\n            pluginRef: 'plugin.google.maps.BaseClass',\n            repo: ''\n        })\n    ], BaseClass);\n    return BaseClass;\n}());\nexport { BaseClass };\n/**\n * @hidden\n * https://github.com/mapsplugin/cordova-plugin-googlemaps-doc/blob/master/v2.0.0/class/BaseArrayClass/README.md\n */\nvar BaseArrayClass = (function (_super) {\n    __extends(BaseArrayClass, _super);\n    function BaseArrayClass(initialData) {\n        var _this = _super.call(this) || this;\n        if (initialData instanceof GoogleMaps.getPlugin().BaseArrayClass) {\n            _this._objectInstance = initialData;\n        }\n        else {\n            _this._objectInstance = new (GoogleMaps.getPlugin().BaseArrayClass)(initialData);\n        }\n        return _this;\n    }\n    /**\n     * Removes all elements from the array.\n     * @param noNotify? {boolean} [options] Set true to prevent remove_at events.\n     */\n    /**\n       * Removes all elements from the array.\n       * @param noNotify? {boolean} [options] Set true to prevent remove_at events.\n       */\n    BaseArrayClass.prototype.empty = /**\n       * Removes all elements from the array.\n       * @param noNotify? {boolean} [options] Set true to prevent remove_at events.\n       */\n    function (noNotify) { };\n    /**\n     * Iterate over each element, calling the provided callback.\n     * @param fn {Function}\n     */\n    /**\n       * Iterate over each element, calling the provided callback.\n       * @param fn {Function}\n       */\n    BaseArrayClass.prototype.forEach = /**\n       * Iterate over each element, calling the provided callback.\n       * @param fn {Function}\n       */\n    function (fn) { };\n    /**\n     * Iterate over each element, calling the provided callback.\n     * @param fn {Function}\n     * @return {Promise<void>}\n     */\n    /**\n       * Iterate over each element, calling the provided callback.\n       * @param fn {Function}\n       * @return {Promise<void>}\n       */\n    BaseArrayClass.prototype.forEachAsync = /**\n       * Iterate over each element, calling the provided callback.\n       * @param fn {Function}\n       * @return {Promise<void>}\n       */\n    function (fn) {\n        var _this = this;\n        return new Promise(function (resolve) {\n            _this._objectInstance.forEachAsync(fn, resolve);\n        });\n    };\n    /**\n     * Iterate over each element, then Returns a new value.\n     * Then you can get the results of each callback.\n     * @param fn {Function}\n     * @return {Array<Object>} returns a new array with the results\n     */\n    /**\n       * Iterate over each element, then Returns a new value.\n       * Then you can get the results of each callback.\n       * @param fn {Function}\n       * @return {Array<Object>} returns a new array with the results\n       */\n    BaseArrayClass.prototype.map = /**\n       * Iterate over each element, then Returns a new value.\n       * Then you can get the results of each callback.\n       * @param fn {Function}\n       * @return {Array<Object>} returns a new array with the results\n       */\n    function (fn) { return; };\n    /**\n     * Iterate over each element, calling the provided callback.\n     * Then you can get the results of each callback.\n     * @param fn {Function}\n     * @param callback {Function}\n     * @return {Promise<any>} returns a new array with the results\n     */\n    /**\n       * Iterate over each element, calling the provided callback.\n       * Then you can get the results of each callback.\n       * @param fn {Function}\n       * @param callback {Function}\n       * @return {Promise<any>} returns a new array with the results\n       */\n    BaseArrayClass.prototype.mapAsync = /**\n       * Iterate over each element, calling the provided callback.\n       * Then you can get the results of each callback.\n       * @param fn {Function}\n       * @param callback {Function}\n       * @return {Promise<any>} returns a new array with the results\n       */\n    function (fn) {\n        var _this = this;\n        return new Promise(function (resolve) {\n            _this._objectInstance.mapAsync(fn, resolve);\n        });\n    };\n    /**\n     * Same as `mapAsync`, but keep the execution order\n     * @param fn {Function}\n     * @param callback {Function}\n     * @return {Promise<any>} returns a new array with the results\n     */\n    /**\n       * Same as `mapAsync`, but keep the execution order\n       * @param fn {Function}\n       * @param callback {Function}\n       * @return {Promise<any>} returns a new array with the results\n       */\n    BaseArrayClass.prototype.mapSeries = /**\n       * Same as `mapAsync`, but keep the execution order\n       * @param fn {Function}\n       * @param callback {Function}\n       * @return {Promise<any>} returns a new array with the results\n       */\n    function (fn) {\n        var _this = this;\n        return new Promise(function (resolve) {\n            _this._objectInstance.mapSeries(fn, resolve);\n        });\n    };\n    /**\n     * The filter() method creates a new array with all elements that pass the test implemented by the provided function.\n     * @param fn {Function}\n     * @return {T[]} returns a new filtered array\n     */\n    /**\n       * The filter() method creates a new array with all elements that pass the test implemented by the provided function.\n       * @param fn {Function}\n       * @return {T[]} returns a new filtered array\n       */\n    BaseArrayClass.prototype.filter = /**\n       * The filter() method creates a new array with all elements that pass the test implemented by the provided function.\n       * @param fn {Function}\n       * @return {T[]} returns a new filtered array\n       */\n    function (fn) { return; };\n    /**\n     * The filterAsync() method creates a new array with all elements that pass the test implemented by the provided function.\n     * @param fn {Function}\n     * @param callback {Function}\n     * @return {Promise<T[]>} returns a new filtered array\n     */\n    /**\n       * The filterAsync() method creates a new array with all elements that pass the test implemented by the provided function.\n       * @param fn {Function}\n       * @param callback {Function}\n       * @return {Promise<T[]>} returns a new filtered array\n       */\n    BaseArrayClass.prototype.filterAsync = /**\n       * The filterAsync() method creates a new array with all elements that pass the test implemented by the provided function.\n       * @param fn {Function}\n       * @param callback {Function}\n       * @return {Promise<T[]>} returns a new filtered array\n       */\n    function (fn) {\n        var _this = this;\n        return new Promise(function (resolve) {\n            _this._objectInstance.filterAsync(fn, resolve);\n        });\n    };\n    /**\n     * Returns a reference to the underlying Array.\n     * @return {Array<Object>}\n     */\n    /**\n       * Returns a reference to the underlying Array.\n       * @return {Array<Object>}\n       */\n    BaseArrayClass.prototype.getArray = /**\n       * Returns a reference to the underlying Array.\n       * @return {Array<Object>}\n       */\n    function () { return; };\n    /**\n     * Returns the element at the specified index.\n     * @param index {number}\n     * @return {Object}\n     */\n    /**\n       * Returns the element at the specified index.\n       * @param index {number}\n       * @return {Object}\n       */\n    BaseArrayClass.prototype.getAt = /**\n       * Returns the element at the specified index.\n       * @param index {number}\n       * @return {Object}\n       */\n    function (index) { };\n    /**\n     * Returns the number of the elements.\n     * @return {number}\n     */\n    /**\n       * Returns the number of the elements.\n       * @return {number}\n       */\n    BaseArrayClass.prototype.getLength = /**\n       * Returns the number of the elements.\n       * @return {number}\n       */\n    function () { return; };\n    /**\n     * The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.\n     * @param element {Object}\n     * @return {number}\n     */\n    /**\n       * The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.\n       * @param element {Object}\n       * @return {number}\n       */\n    BaseArrayClass.prototype.indexOf = /**\n       * The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.\n       * @param element {Object}\n       * @return {number}\n       */\n    function (element) { return; };\n    /**\n     * The reverse() method reverses an array in place.\n     */\n    /**\n       * The reverse() method reverses an array in place.\n       */\n    BaseArrayClass.prototype.reverse = /**\n       * The reverse() method reverses an array in place.\n       */\n    function () { };\n    /**\n     * The sort() method sorts the elements of an array in place and returns the array.\n     */\n    /**\n       * The sort() method sorts the elements of an array in place and returns the array.\n       */\n    BaseArrayClass.prototype.sort = /**\n       * The sort() method sorts the elements of an array in place and returns the array.\n       */\n    function () { };\n    /**\n     * Inserts an element at the specified index.\n     * @param index {number}\n     * @param element {Object}\n     * @param noNotify? {boolean} [options] Set true to prevent insert_at event.\n     * @return {Object}\n     */\n    /**\n       * Inserts an element at the specified index.\n       * @param index {number}\n       * @param element {Object}\n       * @param noNotify? {boolean} [options] Set true to prevent insert_at event.\n       * @return {Object}\n       */\n    BaseArrayClass.prototype.insertAt = /**\n       * Inserts an element at the specified index.\n       * @param index {number}\n       * @param element {Object}\n       * @param noNotify? {boolean} [options] Set true to prevent insert_at event.\n       * @return {Object}\n       */\n    function (index, element, noNotify) { };\n    /**\n     * Removes the last element of the array and returns that element.\n     * @param noNotify? {boolean} [options] Set true to prevent remove_at event.\n     * @return {Object}\n     */\n    /**\n       * Removes the last element of the array and returns that element.\n       * @param noNotify? {boolean} [options] Set true to prevent remove_at event.\n       * @return {Object}\n       */\n    BaseArrayClass.prototype.pop = /**\n       * Removes the last element of the array and returns that element.\n       * @param noNotify? {boolean} [options] Set true to prevent remove_at event.\n       * @return {Object}\n       */\n    function (noNotify) { return; };\n    /**\n     * Adds one element to the end of the array and returns the new length of the array.\n     * @param element {object}\n     * @param noNotify? {boolean} Set true to prevent insert_at events.\n     */\n    /**\n       * Adds one element to the end of the array and returns the new length of the array.\n       * @param element {object}\n       * @param noNotify? {boolean} Set true to prevent insert_at events.\n       */\n    BaseArrayClass.prototype.push = /**\n       * Adds one element to the end of the array and returns the new length of the array.\n       * @param element {object}\n       * @param noNotify? {boolean} Set true to prevent insert_at events.\n       */\n    function (element, noNotify) { };\n    /**\n     * Removes an element from the specified index.\n     * @param index {number}\n     * @param noNotify? {boolean} [options] Set true to prevent remove_at event.\n     */\n    /**\n       * Removes an element from the specified index.\n       * @param index {number}\n       * @param noNotify? {boolean} [options] Set true to prevent remove_at event.\n       */\n    BaseArrayClass.prototype.removeAt = /**\n       * Removes an element from the specified index.\n       * @param index {number}\n       * @param noNotify? {boolean} [options] Set true to prevent remove_at event.\n       */\n    function (index, noNotify) { return; };\n    /**\n     * Sets an element at the specified index.\n     * @param index {number}\n     * @param element {object}\n     * @param noNotify? {boolean} [options] Set true to prevent set_at event.\n     */\n    /**\n       * Sets an element at the specified index.\n       * @param index {number}\n       * @param element {object}\n       * @param noNotify? {boolean} [options] Set true to prevent set_at event.\n       */\n    BaseArrayClass.prototype.setAt = /**\n       * Sets an element at the specified index.\n       * @param index {number}\n       * @param element {object}\n       * @param noNotify? {boolean} [options] Set true to prevent set_at event.\n       */\n    function (index, element, noNotify) { };\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], BaseArrayClass.prototype, \"empty\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Function]),\n        __metadata(\"design:returntype\", void 0)\n    ], BaseArrayClass.prototype, \"forEach\", null);\n    __decorate([\n        CordovaCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Function]),\n        __metadata(\"design:returntype\", Promise)\n    ], BaseArrayClass.prototype, \"forEachAsync\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Function]),\n        __metadata(\"design:returntype\", Array)\n    ], BaseArrayClass.prototype, \"map\", null);\n    __decorate([\n        CordovaCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Function]),\n        __metadata(\"design:returntype\", Promise)\n    ], BaseArrayClass.prototype, \"mapAsync\", null);\n    __decorate([\n        CordovaCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Function]),\n        __metadata(\"design:returntype\", Promise)\n    ], BaseArrayClass.prototype, \"mapSeries\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Function]),\n        __metadata(\"design:returntype\", Array)\n    ], BaseArrayClass.prototype, \"filter\", null);\n    __decorate([\n        CordovaCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Function]),\n        __metadata(\"design:returntype\", Promise)\n    ], BaseArrayClass.prototype, \"filterAsync\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Array)\n    ], BaseArrayClass.prototype, \"getArray\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number]),\n        __metadata(\"design:returntype\", Object)\n    ], BaseArrayClass.prototype, \"getAt\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Number)\n    ], BaseArrayClass.prototype, \"getLength\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", Number)\n    ], BaseArrayClass.prototype, \"indexOf\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], BaseArrayClass.prototype, \"reverse\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], BaseArrayClass.prototype, \"sort\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number, Object, Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], BaseArrayClass.prototype, \"insertAt\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", Object)\n    ], BaseArrayClass.prototype, \"pop\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object, Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], BaseArrayClass.prototype, \"push\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number, Boolean]),\n        __metadata(\"design:returntype\", Object)\n    ], BaseArrayClass.prototype, \"removeAt\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number, Object, Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], BaseArrayClass.prototype, \"setAt\", null);\n    /**\n     * @hidden\n     * https://github.com/mapsplugin/cordova-plugin-googlemaps-doc/blob/master/v2.0.0/class/BaseArrayClass/README.md\n     */\n    BaseArrayClass = __decorate([\n        Plugin({\n            plugin: 'cordova-plugin-googlemaps',\n            pluginName: 'GoogleMaps',\n            pluginRef: 'plugin.google.maps.BaseArrayClass',\n            repo: ''\n        }),\n        __metadata(\"design:paramtypes\", [Object])\n    ], BaseArrayClass);\n    return BaseArrayClass;\n}(BaseClass));\nexport { BaseArrayClass };\n/**\n * @hidden\n * https://github.com/mapsplugin/cordova-plugin-googlemaps-doc/blob/master/v2.0.0/class/Circle/README.md\n */\nvar Circle = (function (_super) {\n    __extends(Circle, _super);\n    function Circle(_map, _objectInstance) {\n        var _this = _super.call(this) || this;\n        _this._map = _map;\n        _this._objectInstance = _objectInstance;\n        return _this;\n    }\n    /**\n     * Returns the ID of instance.\n     * @return {string}\n     */\n    /**\n       * Returns the ID of instance.\n       * @return {string}\n       */\n    Circle.prototype.getId = /**\n       * Returns the ID of instance.\n       * @return {string}\n       */\n    function () { return; };\n    /**\n     * Returns the map instance.\n     * @return {GoogleMap}\n     */\n    /**\n       * Returns the map instance.\n       * @return {GoogleMap}\n       */\n    Circle.prototype.getMap = /**\n       * Returns the map instance.\n       * @return {GoogleMap}\n       */\n    function () { return this._map; };\n    /**\n     * Changes the center position.\n     * @param latLng {ILatLng}\n     */\n    /**\n       * Changes the center position.\n       * @param latLng {ILatLng}\n       */\n    Circle.prototype.setCenter = /**\n       * Changes the center position.\n       * @param latLng {ILatLng}\n       */\n    function (latLng) { };\n    /**\n     * Returns the current center position\n     * @return {ILatLng}\n     */\n    /**\n       * Returns the current center position\n       * @return {ILatLng}\n       */\n    Circle.prototype.getCenter = /**\n       * Returns the current center position\n       * @return {ILatLng}\n       */\n    function () { return; };\n    /**\n     * Returns the current circle radius.\n     * @return {number}\n     */\n    /**\n       * Returns the current circle radius.\n       * @return {number}\n       */\n    Circle.prototype.getRadius = /**\n       * Returns the current circle radius.\n       * @return {number}\n       */\n    function () { return; };\n    /**\n     * Changes the circle radius.\n     * @param radius {number}\n     */\n    /**\n       * Changes the circle radius.\n       * @param radius {number}\n       */\n    Circle.prototype.setRadius = /**\n       * Changes the circle radius.\n       * @param radius {number}\n       */\n    function (radius) { };\n    /**\n     * Changes the filling color (inner color).\n     * @param color {string}\n     */\n    /**\n       * Changes the filling color (inner color).\n       * @param color {string}\n       */\n    Circle.prototype.setFillColor = /**\n       * Changes the filling color (inner color).\n       * @param color {string}\n       */\n    function (color) { };\n    /**\n     * Returns the current circle filling color (inner color).\n     * @return {string}\n     */\n    /**\n       * Returns the current circle filling color (inner color).\n       * @return {string}\n       */\n    Circle.prototype.getFillColor = /**\n       * Returns the current circle filling color (inner color).\n       * @return {string}\n       */\n    function () { return; };\n    /**\n     * Changes the stroke width.\n     * @param strokeWidth {number}\n     */\n    /**\n       * Changes the stroke width.\n       * @param strokeWidth {number}\n       */\n    Circle.prototype.setStrokeWidth = /**\n       * Changes the stroke width.\n       * @param strokeWidth {number}\n       */\n    function (strokeWidth) { };\n    /**\n     * Returns the current circle stroke width (unit: pixel).\n     * @return {number}\n     */\n    /**\n       * Returns the current circle stroke width (unit: pixel).\n       * @return {number}\n       */\n    Circle.prototype.getStrokeWidth = /**\n       * Returns the current circle stroke width (unit: pixel).\n       * @return {number}\n       */\n    function () { return; };\n    /**\n     * Changes the stroke color (outter color).\n     * @param strokeColor {string}\n     */\n    /**\n       * Changes the stroke color (outter color).\n       * @param strokeColor {string}\n       */\n    Circle.prototype.setStrokeColor = /**\n       * Changes the stroke color (outter color).\n       * @param strokeColor {string}\n       */\n    function (strokeColor) { };\n    /**\n     * Returns the current circle stroke color (outer color).\n     * @return {string}\n     */\n    /**\n       * Returns the current circle stroke color (outer color).\n       * @return {string}\n       */\n    Circle.prototype.getStrokeColor = /**\n       * Returns the current circle stroke color (outer color).\n       * @return {string}\n       */\n    function () { return; };\n    /**\n     * Changes click-ability of the circle.\n     * @param clickable {boolean}\n     */\n    /**\n       * Changes click-ability of the circle.\n       * @param clickable {boolean}\n       */\n    Circle.prototype.setClickable = /**\n       * Changes click-ability of the circle.\n       * @param clickable {boolean}\n       */\n    function (clickable) { };\n    /**\n     * Returns true if the circle is clickable.\n     * @return {boolean}\n     */\n    /**\n       * Returns true if the circle is clickable.\n       * @return {boolean}\n       */\n    Circle.prototype.getClickable = /**\n       * Returns true if the circle is clickable.\n       * @return {boolean}\n       */\n    function () { return; };\n    /**\n     * Changes the circle zIndex order.\n     * @param zIndex {number}\n     */\n    /**\n       * Changes the circle zIndex order.\n       * @param zIndex {number}\n       */\n    Circle.prototype.setZIndex = /**\n       * Changes the circle zIndex order.\n       * @param zIndex {number}\n       */\n    function (zIndex) { };\n    /**\n     * Returns the current circle zIndex.\n     * @return {number}\n     */\n    /**\n       * Returns the current circle zIndex.\n       * @return {number}\n       */\n    Circle.prototype.getZIndex = /**\n       * Returns the current circle zIndex.\n       * @return {number}\n       */\n    function () { return; };\n    /**\n     * Remove the circle.\n     */\n    /**\n       * Remove the circle.\n       */\n    Circle.prototype.remove = /**\n       * Remove the circle.\n       */\n    function () { };\n    /**\n     * Returns the latLngBounds (rectangle) that contains the circle.\n     * @return {LatLngBounds}\n     */\n    /**\n       * Returns the latLngBounds (rectangle) that contains the circle.\n       * @return {LatLngBounds}\n       */\n    Circle.prototype.getBounds = /**\n       * Returns the latLngBounds (rectangle) that contains the circle.\n       * @return {LatLngBounds}\n       */\n    function () { return; };\n    /**\n     * Set circle visibility\n     * @param visible {boolean}\n     */\n    /**\n       * Set circle visibility\n       * @param visible {boolean}\n       */\n    Circle.prototype.setVisible = /**\n       * Set circle visibility\n       * @param visible {boolean}\n       */\n    function (visible) { };\n    /**\n     * Returns true if the circle is visible.\n     * @return {boolean}\n     */\n    /**\n       * Returns true if the circle is visible.\n       * @return {boolean}\n       */\n    Circle.prototype.getVisible = /**\n       * Returns true if the circle is visible.\n       * @return {boolean}\n       */\n    function () { return; };\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", String)\n    ], Circle.prototype, \"getId\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], Circle.prototype, \"setCenter\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Object)\n    ], Circle.prototype, \"getCenter\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Number)\n    ], Circle.prototype, \"getRadius\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number]),\n        __metadata(\"design:returntype\", void 0)\n    ], Circle.prototype, \"setRadius\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String]),\n        __metadata(\"design:returntype\", void 0)\n    ], Circle.prototype, \"setFillColor\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", String)\n    ], Circle.prototype, \"getFillColor\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number]),\n        __metadata(\"design:returntype\", void 0)\n    ], Circle.prototype, \"setStrokeWidth\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Number)\n    ], Circle.prototype, \"getStrokeWidth\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String]),\n        __metadata(\"design:returntype\", void 0)\n    ], Circle.prototype, \"setStrokeColor\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", String)\n    ], Circle.prototype, \"getStrokeColor\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], Circle.prototype, \"setClickable\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Boolean)\n    ], Circle.prototype, \"getClickable\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number]),\n        __metadata(\"design:returntype\", void 0)\n    ], Circle.prototype, \"setZIndex\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Number)\n    ], Circle.prototype, \"getZIndex\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], Circle.prototype, \"remove\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", LatLngBounds)\n    ], Circle.prototype, \"getBounds\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], Circle.prototype, \"setVisible\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Boolean)\n    ], Circle.prototype, \"getVisible\", null);\n    return Circle;\n}(BaseClass));\nexport { Circle };\n/**\n * @hidden\n */\nvar Environment = (function () {\n    function Environment() {\n    }\n    Environment_1 = Environment;\n    /**\n     * Set environment variables.\n     */\n    /**\n       * Set environment variables.\n       */\n    Environment.setEnv = /**\n       * Set environment variables.\n       */\n    function (envOptions) {\n        GoogleMaps.getPlugin().environment.setEnv(envOptions);\n    };\n    /**\n     * Get the open source software license information for Google Maps SDK for iOS.\n     * @return {Promise<any>}\n     */\n    /**\n       * Get the open source software license information for Google Maps SDK for iOS.\n       * @return {Promise<any>}\n       */\n    Environment.getLicenseInfo = /**\n       * Get the open source software license information for Google Maps SDK for iOS.\n       * @return {Promise<any>}\n       */\n    function () {\n        return new Promise(function (resolve) {\n            GoogleMaps.getPlugin().environment.getLicenseInfo(function (text) { return resolve(text); });\n        });\n    };\n    /**\n     * @deprecation\n     * @hidden\n     */\n    /**\n       * @deprecation\n       * @hidden\n       */\n    Environment.prototype.getLicenseInfo = /**\n       * @deprecation\n       * @hidden\n       */\n    function () {\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Environment.getLicenseInfo()');\n        return Environment_1.getLicenseInfo();\n    };\n    /**\n     * Specifies the background color of the app.\n     * @param color\n     */\n    /**\n       * Specifies the background color of the app.\n       * @param color\n       */\n    Environment.setBackgroundColor = /**\n       * Specifies the background color of the app.\n       * @param color\n       */\n    function (color) {\n        GoogleMaps.getPlugin().environment.setBackgroundColor(color);\n    };\n    /**\n     * @deprecation\n     * @hidden\n     */\n    /**\n       * @deprecation\n       * @hidden\n       */\n    Environment.prototype.setBackgroundColor = /**\n       * @deprecation\n       * @hidden\n       */\n    function (color) {\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Environment.setBackgroundColor()');\n        Environment_1.setBackgroundColor(color);\n    };\n    /**\n     * @hidden\n     */\n    Environment = Environment_1 = __decorate([\n        Plugin({\n            plugin: 'cordova-plugin-googlemaps',\n            pluginName: 'GoogleMaps',\n            pluginRef: 'plugin.google.maps.environment',\n            repo: ''\n        })\n    ], Environment);\n    return Environment;\n    var Environment_1;\n}());\nexport { Environment };\n/**\n * @hidden\n */\nvar Geocoder = (function () {\n    function Geocoder() {\n    }\n    Geocoder_1 = Geocoder;\n    /**\n     * @deprecation\n     * @hidden\n     */\n    /**\n       * @deprecation\n       * @hidden\n       */\n    Geocoder.prototype.geocode = /**\n       * @deprecation\n       * @hidden\n       */\n    function (request) {\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Geocoder.geocode()');\n        return Geocoder_1.geocode(request);\n    };\n    /**\n     * Converts position to address and vice versa\n     * @param {GeocoderRequest} request Request object with either an address or a position\n     * @return {Promise<GeocoderResult[] | BaseArrayClass<GeocoderResult>>}\n     */\n    /**\n       * Converts position to address and vice versa\n       * @param {GeocoderRequest} request Request object with either an address or a position\n       * @return {Promise<GeocoderResult[] | BaseArrayClass<GeocoderResult>>}\n       */\n    Geocoder.geocode = /**\n       * Converts position to address and vice versa\n       * @param {GeocoderRequest} request Request object with either an address or a position\n       * @return {Promise<GeocoderResult[] | BaseArrayClass<GeocoderResult>>}\n       */\n    function (request) {\n        if (request.address instanceof Array || Array.isArray(request.address) ||\n            request.position instanceof Array || Array.isArray(request.position)) {\n            // -------------------------\n            // Geocoder.geocode({\n            //   address: [\n            //    \"Kyoto, Japan\",\n            //    \"Tokyo, Japan\"\n            //   ]\n            // })\n            // -------------------------\n            return new Promise(function (resolve, reject) {\n                GoogleMaps.getPlugin().Geocoder.geocode(request, function (mvcArray) {\n                    if (mvcArray) {\n                        resolve(new BaseArrayClass(mvcArray));\n                    }\n                    else {\n                        reject();\n                    }\n                });\n            });\n        }\n        else {\n            // -------------------------\n            // Geocoder.geocode({\n            //   address: \"Kyoto, Japan\"\n            // })\n            // -------------------------\n            return new Promise(function (resolve, reject) {\n                GoogleMaps.getPlugin().Geocoder.geocode(request, function (results) {\n                    if (results) {\n                        resolve(results);\n                    }\n                    else {\n                        reject();\n                    }\n                });\n            });\n        }\n    };\n    /**\n     * @hidden\n     */\n    Geocoder = Geocoder_1 = __decorate([\n        Plugin({\n            pluginName: 'GoogleMaps',\n            pluginRef: 'plugin.google.maps.Geocoder',\n            plugin: 'cordova-plugin-googlemaps',\n            repo: ''\n        })\n    ], Geocoder);\n    return Geocoder;\n    var Geocoder_1;\n}());\nexport { Geocoder };\n/**\n * @hidden\n */\nvar LocationService = (function () {\n    function LocationService() {\n    }\n    /**\n     * Get the current device location without map\n     * @return {Promise<MyLocation>}\n     */\n    /**\n       * Get the current device location without map\n       * @return {Promise<MyLocation>}\n       */\n    LocationService.getMyLocation = /**\n       * Get the current device location without map\n       * @return {Promise<MyLocation>}\n       */\n    function (options) {\n        return new Promise(function (resolve, reject) {\n            GoogleMaps.getPlugin().LocationService.getMyLocation(options, resolve, reject);\n        });\n    };\n    /**\n     * Return true if the application has geolocation permission\n     * @return {Promise<boolean>}\n     */\n    /**\n       * Return true if the application has geolocation permission\n       * @return {Promise<boolean>}\n       */\n    LocationService.hasPermission = /**\n       * Return true if the application has geolocation permission\n       * @return {Promise<boolean>}\n       */\n    function () {\n        return new Promise(function (resolve, reject) {\n            GoogleMaps.getPlugin().LocationService.hasPermission(resolve, reject);\n        });\n    };\n    /**\n     * @hidden\n     */\n    LocationService = __decorate([\n        Plugin({\n            pluginName: 'GoogleMaps',\n            pluginRef: 'plugin.google.maps.LocationService',\n            plugin: 'cordova-plugin-googlemaps',\n            repo: ''\n        })\n    ], LocationService);\n    return LocationService;\n}());\nexport { LocationService };\n/**\n * @hidden\n */\nvar Encoding = (function () {\n    function Encoding() {\n    }\n    Encoding_1 = Encoding;\n    /**\n     * @deprecation\n     * @hidden\n     */\n    /**\n       * @deprecation\n       * @hidden\n       */\n    Encoding.prototype.decodePath = /**\n       * @deprecation\n       * @hidden\n       */\n    function (encoded, precision) {\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Encoding.decodePath()');\n        return Encoding_1.decodePath(encoded, precision);\n    };\n    /**\n     * @deprecation\n     * @hidden\n     */\n    /**\n       * @deprecation\n       * @hidden\n       */\n    Encoding.prototype.encodePath = /**\n       * @deprecation\n       * @hidden\n       */\n    function (path) {\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Encoding.encodePath()');\n        return Encoding_1.encodePath(path);\n    };\n    /**\n     * Decodes an encoded path string into a sequence of LatLngs.\n     * @param encoded {string} an encoded path string\n     * @param precision? {number} default: 5\n     * @return {ILatLng[]}\n     */\n    /**\n       * Decodes an encoded path string into a sequence of LatLngs.\n       * @param encoded {string} an encoded path string\n       * @param precision? {number} default: 5\n       * @return {ILatLng[]}\n       */\n    Encoding.decodePath = /**\n       * Decodes an encoded path string into a sequence of LatLngs.\n       * @param encoded {string} an encoded path string\n       * @param precision? {number} default: 5\n       * @return {ILatLng[]}\n       */\n    function (encoded, precision) {\n        return GoogleMaps.getPlugin().geometry.encoding.decodePath(encoded, precision);\n    };\n    /**\n     * Encodes a sequence of LatLngs into an encoded path string.\n     * @param path {Array<ILatLng> | BaseArrayClass<ILatLng>} a sequence of LatLngs\n     * @return {string}\n     */\n    /**\n       * Encodes a sequence of LatLngs into an encoded path string.\n       * @param path {Array<ILatLng> | BaseArrayClass<ILatLng>} a sequence of LatLngs\n       * @return {string}\n       */\n    Encoding.encodePath = /**\n       * Encodes a sequence of LatLngs into an encoded path string.\n       * @param path {Array<ILatLng> | BaseArrayClass<ILatLng>} a sequence of LatLngs\n       * @return {string}\n       */\n    function (path) {\n        return GoogleMaps.getPlugin().geometry.encoding.encodePath(path);\n    };\n    /**\n     * @hidden\n     */\n    Encoding = Encoding_1 = __decorate([\n        Plugin({\n            pluginName: 'GoogleMaps',\n            pluginRef: 'plugin.google.maps.geometry.encoding',\n            plugin: 'cordova-plugin-googlemaps',\n            repo: ''\n        })\n    ], Encoding);\n    return Encoding;\n    var Encoding_1;\n}());\nexport { Encoding };\n/**\n * @hidden\n */\nvar Poly = (function () {\n    function Poly() {\n    }\n    /**\n     * Returns true if the specified location is in the polygon path\n     * @param location {ILatLng}\n     * @param path {ILatLng[]}\n     * @return {boolean}\n     */\n    /**\n       * Returns true if the specified location is in the polygon path\n       * @param location {ILatLng}\n       * @param path {ILatLng[]}\n       * @return {boolean}\n       */\n    Poly.containsLocation = /**\n       * Returns true if the specified location is in the polygon path\n       * @param location {ILatLng}\n       * @param path {ILatLng[]}\n       * @return {boolean}\n       */\n    function (location, path) {\n        return GoogleMaps.getPlugin().geometry.poly.containsLocation(location, path);\n    };\n    /**\n     * Returns true if the specified location is on the polyline path\n     * @param location {ILatLng}\n     * @param path {ILatLng[]}\n     * @return {boolean}\n     */\n    /**\n       * Returns true if the specified location is on the polyline path\n       * @param location {ILatLng}\n       * @param path {ILatLng[]}\n       * @return {boolean}\n       */\n    Poly.isLocationOnEdge = /**\n       * Returns true if the specified location is on the polyline path\n       * @param location {ILatLng}\n       * @param path {ILatLng[]}\n       * @return {boolean}\n       */\n    function (location, path) {\n        return GoogleMaps.getPlugin().geometry.poly.isLocationOnEdge(location, path);\n    };\n    /**\n     * @hidden\n     */\n    Poly = __decorate([\n        Plugin({\n            pluginName: 'GoogleMaps',\n            pluginRef: 'plugin.google.maps.geometry.poly',\n            plugin: 'cordova-plugin-googlemaps',\n            repo: ''\n        })\n    ], Poly);\n    return Poly;\n}());\nexport { Poly };\n/**\n * @hidden\n */\nvar Spherical = (function () {\n    function Spherical() {\n    }\n    Spherical_1 = Spherical;\n    /**\n     * @deprecation\n     * @hidden\n     */\n    /**\n       * @deprecation\n       * @hidden\n       */\n    Spherical.prototype.computeDistanceBetween = /**\n       * @deprecation\n       * @hidden\n       */\n    function (from, to) {\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeDistanceBetween()');\n        return Spherical_1.computeDistanceBetween(from, to);\n    };\n    /**\n     * @deprecation\n     * @hidden\n     */\n    /**\n       * @deprecation\n       * @hidden\n       */\n    Spherical.prototype.computeOffset = /**\n       * @deprecation\n       * @hidden\n       */\n    function (from, distance, heading) {\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeOffset()');\n        return Spherical_1.computeOffset(from, distance, heading);\n    };\n    /**\n     * @deprecation\n     * @hidden\n     */\n    /**\n       * @deprecation\n       * @hidden\n       */\n    Spherical.prototype.computeOffsetOrigin = /**\n       * @deprecation\n       * @hidden\n       */\n    function (to, distance, heading) {\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeOffsetOrigin()');\n        return Spherical_1.computeOffsetOrigin(to, distance, heading);\n    };\n    /**\n     * @deprecation\n     * @hidden\n     */\n    /**\n       * @deprecation\n       * @hidden\n       */\n    Spherical.prototype.computeLength = /**\n       * @deprecation\n       * @hidden\n       */\n    function (path) {\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeLength()');\n        return Spherical_1.computeLength(path);\n    };\n    /**\n     * @deprecation\n     * @hidden\n     */\n    /**\n       * @deprecation\n       * @hidden\n       */\n    Spherical.prototype.computeArea = /**\n       * @deprecation\n       * @hidden\n       */\n    function (path) {\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeArea()');\n        return Spherical_1.computeArea(path);\n    };\n    /**\n     * @deprecation\n     * @hidden\n     */\n    /**\n       * @deprecation\n       * @hidden\n       */\n    Spherical.prototype.computeSignedArea = /**\n       * @deprecation\n       * @hidden\n       */\n    function (path) {\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeSignedArea()');\n        return Spherical_1.computeSignedArea(path);\n    };\n    /**\n     * @deprecation\n     * @hidden\n     */\n    /**\n       * @deprecation\n       * @hidden\n       */\n    Spherical.prototype.computeHeading = /**\n       * @deprecation\n       * @hidden\n       */\n    function (from, to) {\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeHeading()');\n        return Spherical_1.computeHeading(from, to);\n    };\n    /**\n     * @deprecation\n     * @hidden\n     */\n    /**\n       * @deprecation\n       * @hidden\n       */\n    Spherical.prototype.interpolate = /**\n       * @deprecation\n       * @hidden\n       */\n    function (from, to, fraction) {\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.interpolate()');\n        return Spherical_1.interpolate(from, to, fraction);\n    };\n    /**\n     * Returns the distance, in meters, between two LatLngs.\n     * @param locationA {ILatLng}\n     * @param locationB {ILatLng}\n     * @return {number}\n     */\n    /**\n       * Returns the distance, in meters, between two LatLngs.\n       * @param locationA {ILatLng}\n       * @param locationB {ILatLng}\n       * @return {number}\n       */\n    Spherical.computeDistanceBetween = /**\n       * Returns the distance, in meters, between two LatLngs.\n       * @param locationA {ILatLng}\n       * @param locationB {ILatLng}\n       * @return {number}\n       */\n    function (from, to) {\n        return GoogleMaps.getPlugin().geometry.spherical.computeDistanceBetween(from, to);\n    };\n    /**\n     * Returns the LatLng resulting from moving a distance from an origin in the specified heading (expressed in degrees clockwise from north)\n     * @param from {ILatLng}\n     * @param distance {number}\n     * @param heading {number}\n     * @return {LatLng}\n     */\n    /**\n       * Returns the LatLng resulting from moving a distance from an origin in the specified heading (expressed in degrees clockwise from north)\n       * @param from {ILatLng}\n       * @param distance {number}\n       * @param heading {number}\n       * @return {LatLng}\n       */\n    Spherical.computeOffset = /**\n       * Returns the LatLng resulting from moving a distance from an origin in the specified heading (expressed in degrees clockwise from north)\n       * @param from {ILatLng}\n       * @param distance {number}\n       * @param heading {number}\n       * @return {LatLng}\n       */\n    function (from, distance, heading) {\n        return GoogleMaps.getPlugin().geometry.spherical.computeOffset(from, distance, heading);\n    };\n    /**\n     * Returns the location of origin when provided with a LatLng destination, meters travelled and original heading. Headings are expressed in degrees clockwise from North. This function returns null when no solution is available.\n     * @param to {ILatLng} The destination LatLng.\n     * @param distance {number} The distance travelled, in meters.\n     * @param heading {number} The heading in degrees clockwise from north.\n     * @return {LatLng}\n     */\n    /**\n       * Returns the location of origin when provided with a LatLng destination, meters travelled and original heading. Headings are expressed in degrees clockwise from North. This function returns null when no solution is available.\n       * @param to {ILatLng} The destination LatLng.\n       * @param distance {number} The distance travelled, in meters.\n       * @param heading {number} The heading in degrees clockwise from north.\n       * @return {LatLng}\n       */\n    Spherical.computeOffsetOrigin = /**\n       * Returns the location of origin when provided with a LatLng destination, meters travelled and original heading. Headings are expressed in degrees clockwise from North. This function returns null when no solution is available.\n       * @param to {ILatLng} The destination LatLng.\n       * @param distance {number} The distance travelled, in meters.\n       * @param heading {number} The heading in degrees clockwise from north.\n       * @return {LatLng}\n       */\n    function (to, distance, heading) {\n        return GoogleMaps.getPlugin().geometry.spherical.computeOffsetOrigin(to, distance, heading);\n    };\n    /**\n     * Returns the length of the given path.\n     * @param path {Array<ILatLng> | BaseArrayClass<ILatLng>}\n     * @return {number}\n     */\n    /**\n       * Returns the length of the given path.\n       * @param path {Array<ILatLng> | BaseArrayClass<ILatLng>}\n       * @return {number}\n       */\n    Spherical.computeLength = /**\n       * Returns the length of the given path.\n       * @param path {Array<ILatLng> | BaseArrayClass<ILatLng>}\n       * @return {number}\n       */\n    function (path) {\n        return GoogleMaps.getPlugin().geometry.spherical.computeLength(path);\n    };\n    /**\n     * Returns the area of a closed path. The computed area uses the same units as the radius.\n     * @param path {Array<ILatLng> | BaseArrayClass<ILatLng>}.\n     * @return {number}\n     */\n    /**\n       * Returns the area of a closed path. The computed area uses the same units as the radius.\n       * @param path {Array<ILatLng> | BaseArrayClass<ILatLng>}.\n       * @return {number}\n       */\n    Spherical.computeArea = /**\n       * Returns the area of a closed path. The computed area uses the same units as the radius.\n       * @param path {Array<ILatLng> | BaseArrayClass<ILatLng>}.\n       * @return {number}\n       */\n    function (path) {\n        return GoogleMaps.getPlugin().geometry.spherical.computeArea(path);\n    };\n    /**\n     * Returns the signed area of a closed path. The signed area may be used to determine the orientation of the path.\n     * @param path {Array<ILatLng> | BaseArrayClass<ILatLng>}.\n     * @return {number}\n     */\n    /**\n       * Returns the signed area of a closed path. The signed area may be used to determine the orientation of the path.\n       * @param path {Array<ILatLng> | BaseArrayClass<ILatLng>}.\n       * @return {number}\n       */\n    Spherical.computeSignedArea = /**\n       * Returns the signed area of a closed path. The signed area may be used to determine the orientation of the path.\n       * @param path {Array<ILatLng> | BaseArrayClass<ILatLng>}.\n       * @return {number}\n       */\n    function (path) {\n        return GoogleMaps.getPlugin().geometry.spherical.computeSignedArea(path);\n    };\n    /**\n     * Returns the heading from one LatLng to another LatLng. Headings are expressed in degrees clockwise from North within the range (-180,180).\n     * @param from {ILatLng}\n     * @param to {ILatLng}\n     * @return {number}\n     */\n    /**\n       * Returns the heading from one LatLng to another LatLng. Headings are expressed in degrees clockwise from North within the range (-180,180).\n       * @param from {ILatLng}\n       * @param to {ILatLng}\n       * @return {number}\n       */\n    Spherical.computeHeading = /**\n       * Returns the heading from one LatLng to another LatLng. Headings are expressed in degrees clockwise from North within the range (-180,180).\n       * @param from {ILatLng}\n       * @param to {ILatLng}\n       * @return {number}\n       */\n    function (from, to) {\n        return GoogleMaps.getPlugin().geometry.spherical.computeHeading(from, to);\n    };\n    /**\n     * Returns the LatLng which lies the given fraction of the way between the origin LatLng and the destination LatLng.\n     * @param from {ILatLng}     The LatLng from which to start.\n     * @param to {ILatLng}       The LatLng toward which to travel.\n     * @param fraction {number}  A fraction of the distance to travel from 0.0 to 1.0 .\n     * @return {LatLng}\n     */\n    /**\n       * Returns the LatLng which lies the given fraction of the way between the origin LatLng and the destination LatLng.\n       * @param from {ILatLng}     The LatLng from which to start.\n       * @param to {ILatLng}       The LatLng toward which to travel.\n       * @param fraction {number}  A fraction of the distance to travel from 0.0 to 1.0 .\n       * @return {LatLng}\n       */\n    Spherical.interpolate = /**\n       * Returns the LatLng which lies the given fraction of the way between the origin LatLng and the destination LatLng.\n       * @param from {ILatLng}     The LatLng from which to start.\n       * @param to {ILatLng}       The LatLng toward which to travel.\n       * @param fraction {number}  A fraction of the distance to travel from 0.0 to 1.0 .\n       * @return {LatLng}\n       */\n    function (from, to, fraction) {\n        return GoogleMaps.getPlugin().geometry.spherical.interpolate(from, to, fraction);\n    };\n    /**\n     * @hidden\n     */\n    Spherical = Spherical_1 = __decorate([\n        Plugin({\n            pluginName: 'GoogleMaps',\n            pluginRef: 'plugin.google.maps.geometry.spherical',\n            plugin: 'cordova-plugin-googlemaps',\n            repo: ''\n        })\n    ], Spherical);\n    return Spherical;\n    var Spherical_1;\n}());\nexport { Spherical };\n/**\n * @hidden\n */\nvar StreetViewPanorama = (function (_super) {\n    __extends(StreetViewPanorama, _super);\n    function StreetViewPanorama(element, options) {\n        var _this = _super.call(this) || this;\n        if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === true) {\n            if (element instanceof HTMLElement) {\n                _this._objectInstance = GoogleMaps.getPlugin().StreetView.getPanorama(element, options);\n            }\n            else if (typeof element === 'string') {\n                _this._objectInstance = GoogleMaps.getPlugin().StreetView.getPanorama(new Promise(function (resolve, reject) {\n                    var count = 0;\n                    var timer = setInterval(function () {\n                        var target = document.querySelector('.show-page #' + element);\n                        if (target) {\n                            clearInterval(timer);\n                            resolve([target, options]);\n                        }\n                        else {\n                            if (count++ < 20) {\n                                return;\n                            }\n                            clearInterval(timer);\n                            _this._objectInstance.remove();\n                            console.error('Can not find the element [#' + element + ']');\n                            reject();\n                        }\n                    }, 100);\n                }), options);\n            }\n        }\n        return _this;\n    }\n    /**\n     * Sets the point of view for the Street View panorama.\n     */\n    /**\n       * Sets the point of view for the Street View panorama.\n       */\n    StreetViewPanorama.prototype.setPov = /**\n       * Sets the point of view for the Street View panorama.\n       */\n    function (pov) { };\n    /**\n     * Sets the StreetViewPanorama to a given location.\n     */\n    /**\n       * Sets the StreetViewPanorama to a given location.\n       */\n    StreetViewPanorama.prototype.setPosition = /**\n       * Sets the StreetViewPanorama to a given location.\n       */\n    function (cameraPosition) { };\n    /**\n     * Toggles the ability for users to use pan around on the panorama using gestures.\n     * @param gestureEnable {boolean}\n     */\n    /**\n       * Toggles the ability for users to use pan around on the panorama using gestures.\n       * @param gestureEnable {boolean}\n       */\n    StreetViewPanorama.prototype.setPanningGesturesEnabled = /**\n       * Toggles the ability for users to use pan around on the panorama using gestures.\n       * @param gestureEnable {boolean}\n       */\n    function (gestureEnable) { };\n    /**\n     * Retrun true if the panning gesture is enabled.\n     * @return {boolean}\n     */\n    /**\n       * Retrun true if the panning gesture is enabled.\n       * @return {boolean}\n       */\n    StreetViewPanorama.prototype.getPanningGesturesEnabled = /**\n       * Retrun true if the panning gesture is enabled.\n       * @return {boolean}\n       */\n    function () { return; };\n    /**\n     * Toggles the ability for users to zoom on the panorama using gestures.\n     * @param gestureEnable {boolean}\n     */\n    /**\n       * Toggles the ability for users to zoom on the panorama using gestures.\n       * @param gestureEnable {boolean}\n       */\n    StreetViewPanorama.prototype.setZoomGesturesEnabled = /**\n       * Toggles the ability for users to zoom on the panorama using gestures.\n       * @param gestureEnable {boolean}\n       */\n    function (gestureEnable) { };\n    /**\n     * Retrun true if the zooming gesture is enabled.\n     * @return {boolean}\n     */\n    /**\n       * Retrun true if the zooming gesture is enabled.\n       * @return {boolean}\n       */\n    StreetViewPanorama.prototype.getZoomGesturesEnabled = /**\n       * Retrun true if the zooming gesture is enabled.\n       * @return {boolean}\n       */\n    function () { return; };\n    /**\n     * Toggles the ability for users to see street names on the panorama.\n     * @param gestureEnable {boolean}\n     */\n    /**\n       * Toggles the ability for users to see street names on the panorama.\n       * @param gestureEnable {boolean}\n       */\n    StreetViewPanorama.prototype.setStreetNamesEnabled = /**\n       * Toggles the ability for users to see street names on the panorama.\n       * @param gestureEnable {boolean}\n       */\n    function (gestureEnable) { };\n    /**\n     * Retrun true if the street names control is enabled.\n     * @return {boolean}\n     */\n    /**\n       * Retrun true if the street names control is enabled.\n       * @return {boolean}\n       */\n    StreetViewPanorama.prototype.getStreetNamesEnabled = /**\n       * Retrun true if the street names control is enabled.\n       * @return {boolean}\n       */\n    function () { return; };\n    /**\n     * Toggles the ability for users to move between panoramas.\n     * @param gestureEnable {boolean}\n     */\n    /**\n       * Toggles the ability for users to move between panoramas.\n       * @param gestureEnable {boolean}\n       */\n    StreetViewPanorama.prototype.setNavigationEnabled = /**\n       * Toggles the ability for users to move between panoramas.\n       * @param gestureEnable {boolean}\n       */\n    function (gestureEnable) { };\n    /**\n     * Retrun true if the navigation control is enabled.\n     * @return {boolean}\n     */\n    /**\n       * Retrun true if the navigation control is enabled.\n       * @return {boolean}\n       */\n    StreetViewPanorama.prototype.getNavigationEnabled = /**\n       * Retrun true if the navigation control is enabled.\n       * @return {boolean}\n       */\n    function () { return; };\n    /**\n     * Retrun the navigation links (StreetViewLocation.links)\n     * @return {StreetViewNavigationLink[]}\n     */\n    /**\n       * Retrun the navigation links (StreetViewLocation.links)\n       * @return {StreetViewNavigationLink[]}\n       */\n    StreetViewPanorama.prototype.getLinks = /**\n       * Retrun the navigation links (StreetViewLocation.links)\n       * @return {StreetViewNavigationLink[]}\n       */\n    function () { return; };\n    /**\n     * Retrun the current location\n     * @return {StreetViewLocation}\n     */\n    /**\n       * Retrun the current location\n       * @return {StreetViewLocation}\n       */\n    StreetViewPanorama.prototype.getLocation = /**\n       * Retrun the current location\n       * @return {StreetViewLocation}\n       */\n    function () { return; };\n    /**\n     * Retrun the current panorama id\n     * @return {string}\n     */\n    /**\n       * Retrun the current panorama id\n       * @return {string}\n       */\n    StreetViewPanorama.prototype.getPano = /**\n       * Retrun the current panorama id\n       * @return {string}\n       */\n    function () { return; };\n    /**\n     * Retrun the current position (StreetViewLocation.latLng)\n     * @return {string}\n     */\n    /**\n       * Retrun the current position (StreetViewLocation.latLng)\n       * @return {string}\n       */\n    StreetViewPanorama.prototype.getPosition = /**\n       * Retrun the current position (StreetViewLocation.latLng)\n       * @return {string}\n       */\n    function () { return; };\n    /**\n     * Destroy a map completely\n     * @return {Promise<any>}\n     */\n    /**\n       * Destroy a map completely\n       * @return {Promise<any>}\n       */\n    StreetViewPanorama.prototype.remove = /**\n       * Destroy a map completely\n       * @return {Promise<any>}\n       */\n    function () {\n        var _this = this;\n        return new Promise(function (resolve) {\n            _this._objectInstance.remove(function () { return resolve(); });\n        });\n    };\n    __decorate([\n        CordovaInstance(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], StreetViewPanorama.prototype, \"setPov\", null);\n    __decorate([\n        CordovaInstance(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], StreetViewPanorama.prototype, \"setPosition\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], StreetViewPanorama.prototype, \"setPanningGesturesEnabled\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Boolean)\n    ], StreetViewPanorama.prototype, \"getPanningGesturesEnabled\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], StreetViewPanorama.prototype, \"setZoomGesturesEnabled\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Boolean)\n    ], StreetViewPanorama.prototype, \"getZoomGesturesEnabled\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], StreetViewPanorama.prototype, \"setStreetNamesEnabled\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Boolean)\n    ], StreetViewPanorama.prototype, \"getStreetNamesEnabled\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], StreetViewPanorama.prototype, \"setNavigationEnabled\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Boolean)\n    ], StreetViewPanorama.prototype, \"getNavigationEnabled\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Array)\n    ], StreetViewPanorama.prototype, \"getLinks\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Object)\n    ], StreetViewPanorama.prototype, \"getLocation\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", String)\n    ], StreetViewPanorama.prototype, \"getPano\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Object)\n    ], StreetViewPanorama.prototype, \"getPosition\", null);\n    __decorate([\n        CordovaInstance(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Promise)\n    ], StreetViewPanorama.prototype, \"remove\", null);\n    /**\n     * @hidden\n     */\n    StreetViewPanorama = __decorate([\n        Plugin({\n            pluginName: 'StreetViewPanorama',\n            plugin: 'cordova-plugin-googlemaps'\n        }),\n        __metadata(\"design:paramtypes\", [Object, Object])\n    ], StreetViewPanorama);\n    return StreetViewPanorama;\n}(BaseClass));\nexport { StreetViewPanorama };\n/**\n * @hidden\n */\nvar GoogleMap = (function (_super) {\n    __extends(GoogleMap, _super);\n    function GoogleMap(element, options) {\n        var _this = _super.call(this) || this;\n        if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === true) {\n            if (element instanceof HTMLElement) {\n                _this._objectInstance = GoogleMaps.getPlugin().Map.getMap(element, options);\n            }\n            else if (typeof element === 'string') {\n                _this._objectInstance = GoogleMaps.getPlugin().Map.getMap(new Promise(function (resolve, reject) {\n                    var count = 0;\n                    var timer = setInterval(function () {\n                        var target = document.querySelector('.show-page #' + element);\n                        if (target) {\n                            clearInterval(timer);\n                            resolve([target, options]);\n                        }\n                        else {\n                            if (count++ < 20) {\n                                return;\n                            }\n                            clearInterval(timer);\n                            _this._objectInstance.remove();\n                            console.error('Can not find the element [#' + element + ']');\n                            reject();\n                        }\n                    }, 100);\n                }), options);\n            }\n            else if (element === null && options) {\n                _this._objectInstance = GoogleMaps.getPlugin().Map.getMap(null, options);\n            }\n        }\n        return _this;\n    }\n    /**\n     * Changes the map div\n     * @param domNode {HTMLElement | string} [options] If you want to display the map in an html element, you need to specify an element or id. If omit this argument, the map is detached from webview.\n     */\n    /**\n       * Changes the map div\n       * @param domNode {HTMLElement | string} [options] If you want to display the map in an html element, you need to specify an element or id. If omit this argument, the map is detached from webview.\n       */\n    GoogleMap.prototype.setDiv = /**\n       * Changes the map div\n       * @param domNode {HTMLElement | string} [options] If you want to display the map in an html element, you need to specify an element or id. If omit this argument, the map is detached from webview.\n       */\n    function (domNode) {\n        if (typeof domNode === 'string') {\n            this._objectInstance.setDiv(document.querySelector('.show-page #' + domNode));\n        }\n        else {\n            this._objectInstance.setDiv(domNode);\n        }\n    };\n    /**\n     * Returns the map HTML element\n     * @return {HTMLElement}\n     */\n    /**\n       * Returns the map HTML element\n       * @return {HTMLElement}\n       */\n    GoogleMap.prototype.getDiv = /**\n       * Returns the map HTML element\n       * @return {HTMLElement}\n       */\n    function () { return; };\n    /**\n     * Changes the map type id\n     * @param mapTypeId {string}\n     */\n    /**\n       * Changes the map type id\n       * @param mapTypeId {string}\n       */\n    GoogleMap.prototype.setMapTypeId = /**\n       * Changes the map type id\n       * @param mapTypeId {string}\n       */\n    function (mapTypeId) { };\n    /**\n     * Moves the camera with animation\n     * @return {Promise<any>}\n     */\n    /**\n       * Moves the camera with animation\n       * @return {Promise<any>}\n       */\n    GoogleMap.prototype.animateCamera = /**\n       * Moves the camera with animation\n       * @return {Promise<any>}\n       */\n    function (cameraPosition) { return; };\n    /**\n     * Zooming in the camera with animation\n     * @return {Promise<any>}\n     */\n    /**\n       * Zooming in the camera with animation\n       * @return {Promise<any>}\n       */\n    GoogleMap.prototype.animateCameraZoomIn = /**\n       * Zooming in the camera with animation\n       * @return {Promise<any>}\n       */\n    function () { return; };\n    /**\n     * Zooming out the camera with animation\n     * @return {Promise<any>}\n     */\n    /**\n       * Zooming out the camera with animation\n       * @return {Promise<any>}\n       */\n    GoogleMap.prototype.animateCameraZoomOut = /**\n       * Zooming out the camera with animation\n       * @return {Promise<any>}\n       */\n    function () { return; };\n    /**\n     * Moves the camera without animation\n     * @return {Promise<any>}\n     */\n    /**\n       * Moves the camera without animation\n       * @return {Promise<any>}\n       */\n    GoogleMap.prototype.moveCamera = /**\n       * Moves the camera without animation\n       * @return {Promise<any>}\n       */\n    function (cameraPosition) { return; };\n    /**\n     * Zooming in the camera without animation\n     * @return {Promise<any>}\n     */\n    /**\n       * Zooming in the camera without animation\n       * @return {Promise<any>}\n       */\n    GoogleMap.prototype.moveCameraZoomIn = /**\n       * Zooming in the camera without animation\n       * @return {Promise<any>}\n       */\n    function () { return; };\n    /**\n     * Zooming out the camera without animation\n     * @return {Promise<any>}\n     */\n    /**\n       * Zooming out the camera without animation\n       * @return {Promise<any>}\n       */\n    GoogleMap.prototype.moveCameraZoomOut = /**\n       * Zooming out the camera without animation\n       * @return {Promise<any>}\n       */\n    function () { return; };\n    /**\n     * Get the position of the camera.\n     * @return {CameraPosition}\n     */\n    /**\n       * Get the position of the camera.\n       * @return {CameraPosition}\n       */\n    GoogleMap.prototype.getCameraPosition = /**\n       * Get the position of the camera.\n       * @return {CameraPosition}\n       */\n    function () { return; };\n    /**\n     * Get the current camera target position\n     * @return {ILatLng}\n     */\n    /**\n       * Get the current camera target position\n       * @return {ILatLng}\n       */\n    GoogleMap.prototype.getCameraTarget = /**\n       * Get the current camera target position\n       * @return {ILatLng}\n       */\n    function () { return; };\n    /**\n     * Get the current camera zoom level\n     * @return {number}\n     */\n    /**\n       * Get the current camera zoom level\n       * @return {number}\n       */\n    GoogleMap.prototype.getCameraZoom = /**\n       * Get the current camera zoom level\n       * @return {number}\n       */\n    function () { return; };\n    /**\n     * Get the current camera bearing\n     * @return {number}\n     */\n    /**\n       * Get the current camera bearing\n       * @return {number}\n       */\n    GoogleMap.prototype.getCameraBearing = /**\n       * Get the current camera bearing\n       * @return {number}\n       */\n    function () { return; };\n    /**\n     * Get the current camera tilt (view angle)\n     * @return {number}\n     */\n    /**\n       * Get the current camera tilt (view angle)\n       * @return {number}\n       */\n    GoogleMap.prototype.getCameraTilt = /**\n       * Get the current camera tilt (view angle)\n       * @return {number}\n       */\n    function () { return; };\n    /**\n     * Set the center position of the camera view\n     * @param latLng {ILatLng | Array<ILatLng>}\n     */\n    /**\n       * Set the center position of the camera view\n       * @param latLng {ILatLng | Array<ILatLng>}\n       */\n    GoogleMap.prototype.setCameraTarget = /**\n       * Set the center position of the camera view\n       * @param latLng {ILatLng | Array<ILatLng>}\n       */\n    function (latLng) { };\n    /**\n     * Set zoom level of the camera\n     * @param zoomLevel {number} Zoom level\n     */\n    /**\n       * Set zoom level of the camera\n       * @param zoomLevel {number} Zoom level\n       */\n    GoogleMap.prototype.setCameraZoom = /**\n       * Set zoom level of the camera\n       * @param zoomLevel {number} Zoom level\n       */\n    function (zoomLevel) { };\n    /**\n     * Set the camera view angle\n     * @param tiltAngle {number} Tilt angle\n     */\n    /**\n       * Set the camera view angle\n       * @param tiltAngle {number} Tilt angle\n       */\n    GoogleMap.prototype.setCameraTilt = /**\n       * Set the camera view angle\n       * @param tiltAngle {number} Tilt angle\n       */\n    function (tiltAngle) { };\n    /**\n     * Set camera bearing\n     * @param bearing {any}\n     */\n    /**\n       * Set camera bearing\n       * @param bearing {any}\n       */\n    GoogleMap.prototype.setCameraBearing = /**\n       * Set camera bearing\n       * @param bearing {any}\n       */\n    function (bearing) { };\n    /**\n     * Changes the center of the map by the given distance in pixels\n     * @param x {number}\n     * @param y {number}\n     */\n    /**\n       * Changes the center of the map by the given distance in pixels\n       * @param x {number}\n       * @param y {number}\n       */\n    GoogleMap.prototype.panBy = /**\n       * Changes the center of the map by the given distance in pixels\n       * @param x {number}\n       * @param y {number}\n       */\n    function (x, y) { };\n    /**\n     * Get the current visible region (southWest and northEast)\n     * @return {VisibleRegion}\n     */\n    /**\n       * Get the current visible region (southWest and northEast)\n       * @return {VisibleRegion}\n       */\n    GoogleMap.prototype.getVisibleRegion = /**\n       * Get the current visible region (southWest and northEast)\n       * @return {VisibleRegion}\n       */\n    function () { return; };\n    /**\n     * Get the current device location\n     * @return {Promise<MyLocation>}\n     */\n    /**\n       * Get the current device location\n       * @return {Promise<MyLocation>}\n       */\n    GoogleMap.prototype.getMyLocation = /**\n       * Get the current device location\n       * @return {Promise<MyLocation>}\n       */\n    function (options) {\n        return new Promise(function (resolve, reject) {\n            GoogleMaps.getPlugin().LocationService.getMyLocation(options, resolve, reject);\n        });\n    };\n    /**\n     * Set false to ignore all clicks on the map\n     * @param isClickable {boolean}\n     */\n    /**\n       * Set false to ignore all clicks on the map\n       * @param isClickable {boolean}\n       */\n    GoogleMap.prototype.setClickable = /**\n       * Set false to ignore all clicks on the map\n       * @param isClickable {boolean}\n       */\n    function (isClickable) { };\n    /**\n     * Destroy a map completely\n     * @return {Promise<any>}\n     */\n    /**\n       * Destroy a map completely\n       * @return {Promise<any>}\n       */\n    GoogleMap.prototype.remove = /**\n       * Destroy a map completely\n       * @return {Promise<any>}\n       */\n    function () {\n        var _this = this;\n        if (this.get('_overlays')) {\n            Object.keys(this.get('_overlays')).forEach(function (overlayId) {\n                _this.get('_overlays')[overlayId] = null;\n                delete _this.get('_overlays')[overlayId];\n            });\n        }\n        return new Promise(function (resolve) {\n            _this._objectInstance.remove(function () { return resolve(); });\n        });\n    };\n    /**\n     * Remove all overlays, such as marker\n     * @return {Promise<any>}\n     */\n    /**\n       * Remove all overlays, such as marker\n       * @return {Promise<any>}\n       */\n    GoogleMap.prototype.clear = /**\n       * Remove all overlays, such as marker\n       * @return {Promise<any>}\n       */\n    function () {\n        var _this = this;\n        if (this.get('_overlays')) {\n            Object.keys(this.get('_overlays')).forEach(function (overlayId) {\n                _this.get('_overlays')[overlayId] = null;\n                delete _this.get('_overlays')[overlayId];\n            });\n        }\n        return new Promise(function (resolve) {\n            _this._objectInstance.clear(function () { return resolve(); });\n        });\n    };\n    /**\n     * Convert the unit from LatLng to the pixels from the left/top of the map div\n     * @return {Promise<any>}\n     */\n    /**\n       * Convert the unit from LatLng to the pixels from the left/top of the map div\n       * @return {Promise<any>}\n       */\n    GoogleMap.prototype.fromLatLngToPoint = /**\n       * Convert the unit from LatLng to the pixels from the left/top of the map div\n       * @return {Promise<any>}\n       */\n    function (latLng) { return; };\n    /**\n     * Convert the unit from the pixels from the left/top to the LatLng\n     * @return {Promise<LatLng>}\n     */\n    /**\n       * Convert the unit from the pixels from the left/top to the LatLng\n       * @return {Promise<LatLng>}\n       */\n    GoogleMap.prototype.fromPointToLatLng = /**\n       * Convert the unit from the pixels from the left/top to the LatLng\n       * @return {Promise<LatLng>}\n       */\n    function (point) { return; };\n    /**\n     * Set true if you want to show the MyLocation control (blue dot)\n     * @param enabled {boolean}\n     */\n    /**\n       * Set true if you want to show the MyLocation control (blue dot)\n       * @param enabled {boolean}\n       */\n    GoogleMap.prototype.setMyLocationEnabled = /**\n       * Set true if you want to show the MyLocation control (blue dot)\n       * @param enabled {boolean}\n       */\n    function (enabled) { };\n    /**\n     * Set true if you want to show the MyLocation button\n     * @param enabled {boolean}\n     */\n    /**\n       * Set true if you want to show the MyLocation button\n       * @param enabled {boolean}\n       */\n    GoogleMap.prototype.setMyLocationButtonEnabled = /**\n       * Set true if you want to show the MyLocation button\n       * @param enabled {boolean}\n       */\n    function (enabled) { };\n    /**\n     * Get the currently focused building\n     * @return {Promise<any>}\n     */\n    /**\n       * Get the currently focused building\n       * @return {Promise<any>}\n       */\n    GoogleMap.prototype.getFocusedBuilding = /**\n       * Get the currently focused building\n       * @return {Promise<any>}\n       */\n    function () { return; };\n    /**\n     * Set true if you want to show the indoor map\n     * @param enabled {boolean}\n     */\n    /**\n       * Set true if you want to show the indoor map\n       * @param enabled {boolean}\n       */\n    GoogleMap.prototype.setIndoorEnabled = /**\n       * Set true if you want to show the indoor map\n       * @param enabled {boolean}\n       */\n    function (enabled) { };\n    /**\n     * Set true if you want to show the traffic layer\n     * @param enabled {boolean}\n     */\n    /**\n       * Set true if you want to show the traffic layer\n       * @param enabled {boolean}\n       */\n    GoogleMap.prototype.setTrafficEnabled = /**\n       * Set true if you want to show the traffic layer\n       * @param enabled {boolean}\n       */\n    function (enabled) { };\n    /**\n     * Set true if you want to show the compass button\n     * @param enabled {boolean}\n     */\n    /**\n       * Set true if you want to show the compass button\n       * @param enabled {boolean}\n       */\n    GoogleMap.prototype.setCompassEnabled = /**\n       * Set true if you want to show the compass button\n       * @param enabled {boolean}\n       */\n    function (enabled) { };\n    /**\n     * Sets the preference for whether all gestures should be enabled or disabled\n     * @param enabled {boolean}\n     */\n    /**\n       * Sets the preference for whether all gestures should be enabled or disabled\n       * @param enabled {boolean}\n       */\n    GoogleMap.prototype.setAllGesturesEnabled = /**\n       * Sets the preference for whether all gestures should be enabled or disabled\n       * @param enabled {boolean}\n       */\n    function (enabled) { };\n    /**\n     * Set visibility of the map\n     * @param visible {boolean}\n     */\n    /**\n       * Set visibility of the map\n       * @param visible {boolean}\n       */\n    GoogleMap.prototype.setVisible = /**\n       * Set visibility of the map\n       * @param visible {boolean}\n       */\n    function (visible) { };\n    /**\n     * Adjust the map padding (same as CSS padding rule)\n     * @param top {number}\n     * @param right {number}\n     * @param left {number}\n     * @param bottom {number}\n     */\n    /**\n       * Adjust the map padding (same as CSS padding rule)\n       * @param top {number}\n       * @param right {number}\n       * @param left {number}\n       * @param bottom {number}\n       */\n    GoogleMap.prototype.setPadding = /**\n       * Adjust the map padding (same as CSS padding rule)\n       * @param top {number}\n       * @param right {number}\n       * @param left {number}\n       * @param bottom {number}\n       */\n    function (top, right, bottom, left) { };\n    /**\n     * Set options\n     * @param options\n     */\n    /**\n       * Set options\n       * @param options\n       */\n    GoogleMap.prototype.setOptions = /**\n       * Set options\n       * @param options\n       */\n    function (options) { };\n    /**\n     * Adds a marker\n     * @param options {MarkerOptions} options\n     * @return {Promise<Marker>}\n     */\n    /**\n       * Adds a marker\n       * @param options {MarkerOptions} options\n       * @return {Promise<Marker>}\n       */\n    GoogleMap.prototype.addMarker = /**\n       * Adds a marker\n       * @param options {MarkerOptions} options\n       * @return {Promise<Marker>}\n       */\n    function (options) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this._objectInstance.addMarker(options, function (marker) {\n                if (marker) {\n                    var overlayId_1 = marker.getId();\n                    var overlay_1 = new Marker(_this, marker);\n                    _this.get('_overlays')[overlayId_1] = overlay_1;\n                    marker.one(overlayId_1 + '_remove', function () {\n                        if (_this.get('_overlays')) {\n                            _this.get('_overlays')[overlayId_1] = null;\n                            overlay_1.destroy();\n                        }\n                    });\n                    resolve(overlay_1);\n                }\n                else {\n                    reject();\n                }\n            });\n        });\n    };\n    /**\n     * Adds a marker in synchronous\n     * @param options {MarkerOptions} options\n     * @Returns {Marker}\n     */\n    /**\n       * Adds a marker in synchronous\n       * @param options {MarkerOptions} options\n       * @Returns {Marker}\n       */\n    GoogleMap.prototype.addMarkerSync = /**\n       * Adds a marker in synchronous\n       * @param options {MarkerOptions} options\n       * @Returns {Marker}\n       */\n    function (options) {\n        var _this = this;\n        var marker = this._objectInstance.addMarker(options);\n        var overlayId = marker.getId();\n        var overlay = new Marker(this, marker);\n        this.get('_overlays')[overlayId] = overlay;\n        marker.one(overlayId + '_remove', function () {\n            if (_this.get('_overlays')) {\n                _this.get('_overlays')[overlayId] = null;\n                overlay.destroy();\n            }\n        });\n        return overlay;\n    };\n    /**\n     * Adds a marker cluster\n     * @param options {MarkerClusterOptions} options\n     * @return {Promise<MarkerCluster>}\n     */\n    /**\n       * Adds a marker cluster\n       * @param options {MarkerClusterOptions} options\n       * @return {Promise<MarkerCluster>}\n       */\n    GoogleMap.prototype.addMarkerCluster = /**\n       * Adds a marker cluster\n       * @param options {MarkerClusterOptions} options\n       * @return {Promise<MarkerCluster>}\n       */\n    function (options) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this._objectInstance.addMarkerCluster(options, function (markerCluster) {\n                if (markerCluster) {\n                    var overlayId_2 = markerCluster.getId();\n                    var overlay_2 = new MarkerCluster(_this, markerCluster);\n                    _this.get('_overlays')[overlayId_2] = overlay_2;\n                    markerCluster.one('remove', function () {\n                        if (_this.get('_overlays')) {\n                            _this.get('_overlays')[overlayId_2] = null;\n                            overlay_2.destroy();\n                        }\n                    });\n                    markerCluster.set('_overlays', new BaseArrayClass());\n                    resolve(overlay_2);\n                }\n                else {\n                    reject();\n                }\n            });\n        });\n    };\n    /**\n     * Adds a marker cluster in synchronous\n     * @param options {MarkerClusterOptions} options\n     * @Returns {MarkerCluster}\n     */\n    /**\n       * Adds a marker cluster in synchronous\n       * @param options {MarkerClusterOptions} options\n       * @Returns {MarkerCluster}\n       */\n    GoogleMap.prototype.addMarkerClusterSync = /**\n       * Adds a marker cluster in synchronous\n       * @param options {MarkerClusterOptions} options\n       * @Returns {MarkerCluster}\n       */\n    function (options) {\n        var _this = this;\n        var markerCluster = this._objectInstance.addMarkerCluster(options);\n        var overlayId = markerCluster.getId();\n        var overlay = new MarkerCluster(this, markerCluster);\n        this.get('_overlays')[overlayId] = overlay;\n        markerCluster.one(overlayId + '_remove', function () {\n            if (_this.get('_overlays')) {\n                _this.get('_overlays')[overlayId] = null;\n                overlay.destroy();\n            }\n        });\n        markerCluster.set('_overlays', new BaseArrayClass());\n        return overlay;\n    };\n    /**\n     * Adds a circle\n     * @param options {CircleOptions} options\n     * @return {Promise<Circle>}\n     */\n    /**\n       * Adds a circle\n       * @param options {CircleOptions} options\n       * @return {Promise<Circle>}\n       */\n    GoogleMap.prototype.addCircle = /**\n       * Adds a circle\n       * @param options {CircleOptions} options\n       * @return {Promise<Circle>}\n       */\n    function (options) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this._objectInstance.addCircle(options, function (circle) {\n                if (circle) {\n                    var overlayId_3 = circle.getId();\n                    var overlay_3 = new Circle(_this, circle);\n                    _this.get('_overlays')[overlayId_3] = overlay_3;\n                    circle.one(overlayId_3 + '_remove', function () {\n                        if (_this.get('_overlays')) {\n                            _this.get('_overlays')[overlayId_3] = null;\n                            overlay_3.destroy();\n                        }\n                    });\n                    resolve(overlay_3);\n                }\n                else {\n                    reject();\n                }\n            });\n        });\n    };\n    /**\n     * Adds a circle in synchronous\n     * @param options {CircleOptions} options\n     * @return {Circle}\n     */\n    /**\n       * Adds a circle in synchronous\n       * @param options {CircleOptions} options\n       * @return {Circle}\n       */\n    GoogleMap.prototype.addCircleSync = /**\n       * Adds a circle in synchronous\n       * @param options {CircleOptions} options\n       * @return {Circle}\n       */\n    function (options) {\n        var _this = this;\n        var circle = this._objectInstance.addCircle(options);\n        var overlayId = circle.getId();\n        var overlay = new Circle(this, circle);\n        this.get('_overlays')[overlayId] = overlay;\n        circle.one(overlayId + '_remove', function () {\n            if (_this.get('_overlays')) {\n                _this.get('_overlays')[overlayId] = null;\n                overlay.destroy();\n            }\n        });\n        return overlay;\n    };\n    /**\n     * Adds a polygon\n     * @param options {PolygonOptions} options\n     * @return {Promise<Polygon>}\n     */\n    /**\n       * Adds a polygon\n       * @param options {PolygonOptions} options\n       * @return {Promise<Polygon>}\n       */\n    GoogleMap.prototype.addPolygon = /**\n       * Adds a polygon\n       * @param options {PolygonOptions} options\n       * @return {Promise<Polygon>}\n       */\n    function (options) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this._objectInstance.addPolygon(options, function (polygon) {\n                if (polygon) {\n                    var overlayId_4 = polygon.getId();\n                    var overlay_4 = new Polygon(_this, polygon);\n                    _this.get('_overlays')[overlayId_4] = overlay_4;\n                    polygon.one(overlayId_4 + '_remove', function () {\n                        if (_this.get('_overlays')) {\n                            _this.get('_overlays')[overlayId_4] = null;\n                            overlay_4.destroy();\n                        }\n                    });\n                    resolve(overlay_4);\n                }\n                else {\n                    reject();\n                }\n            });\n        });\n    };\n    /**\n     * Adds a polygon in synchronous\n     * @param options {PolygonOptions} options\n     * @return {Polygon}\n     */\n    /**\n       * Adds a polygon in synchronous\n       * @param options {PolygonOptions} options\n       * @return {Polygon}\n       */\n    GoogleMap.prototype.addPolygonSync = /**\n       * Adds a polygon in synchronous\n       * @param options {PolygonOptions} options\n       * @return {Polygon}\n       */\n    function (options) {\n        var _this = this;\n        var polygon = this._objectInstance.addPolygon(options);\n        var overlayId = polygon.getId();\n        var overlay = new Polygon(this, polygon);\n        this.get('_overlays')[overlayId] = overlay;\n        polygon.one(overlayId + '_remove', function () {\n            if (_this.get('_overlays')) {\n                _this.get('_overlays')[overlayId] = null;\n                overlay.destroy();\n            }\n        });\n        return overlay;\n    };\n    /**\n     * Adds a polyline\n     * @param options {PolylineOptions} options\n     * @return {Promise<Polyline>}\n     */\n    /**\n       * Adds a polyline\n       * @param options {PolylineOptions} options\n       * @return {Promise<Polyline>}\n       */\n    GoogleMap.prototype.addPolyline = /**\n       * Adds a polyline\n       * @param options {PolylineOptions} options\n       * @return {Promise<Polyline>}\n       */\n    function (options) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this._objectInstance.addPolyline(options, function (polyline) {\n                if (polyline) {\n                    var overlayId_5 = polyline.getId();\n                    var overlay_5 = new Polyline(_this, polyline);\n                    _this.get('_overlays')[overlayId_5] = overlay_5;\n                    polyline.one(overlayId_5 + '_remove', function () {\n                        if (_this.get('_overlays')) {\n                            _this.get('_overlays')[overlayId_5] = null;\n                            overlay_5.destroy();\n                        }\n                    });\n                    resolve(overlay_5);\n                }\n                else {\n                    reject();\n                }\n            });\n        });\n    };\n    /**\n     * Adds a polyline in synchronous\n     * @param options {PolylineOptions} options\n     * @return {Polyline}\n     */\n    /**\n       * Adds a polyline in synchronous\n       * @param options {PolylineOptions} options\n       * @return {Polyline}\n       */\n    GoogleMap.prototype.addPolylineSync = /**\n       * Adds a polyline in synchronous\n       * @param options {PolylineOptions} options\n       * @return {Polyline}\n       */\n    function (options) {\n        var _this = this;\n        var polyline = this._objectInstance.addPolyline(options);\n        var overlayId = polyline.getId();\n        var overlay = new Polyline(this, polyline);\n        this.get('_overlays')[overlayId] = overlay;\n        polyline.one(overlayId + '_remove', function () {\n            if (_this.get('_overlays')) {\n                _this.get('_overlays')[overlayId] = null;\n                overlay.destroy();\n            }\n        });\n        return overlay;\n    };\n    /**\n     * Adds a tile overlay\n     * @param options {TileOverlayOptions} options\n     * @return {Promise<TileOverlay>}\n     */\n    /**\n       * Adds a tile overlay\n       * @param options {TileOverlayOptions} options\n       * @return {Promise<TileOverlay>}\n       */\n    GoogleMap.prototype.addTileOverlay = /**\n       * Adds a tile overlay\n       * @param options {TileOverlayOptions} options\n       * @return {Promise<TileOverlay>}\n       */\n    function (options) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this._objectInstance.addTileOverlay(options, function (tileOverlay) {\n                if (tileOverlay) {\n                    var overlayId_6 = tileOverlay.getId();\n                    var overlay_6 = new TileOverlay(_this, tileOverlay);\n                    _this.get('_overlays')[overlayId_6] = overlay_6;\n                    tileOverlay.one(overlayId_6 + '_remove', function () {\n                        if (_this.get('_overlays')) {\n                            _this.get('_overlays')[overlayId_6] = null;\n                            overlay_6.destroy();\n                        }\n                    });\n                    resolve(overlay_6);\n                }\n                else {\n                    reject();\n                }\n            });\n        });\n    };\n    /**\n     * Adds a tile overlay in synchronous\n     * @param options {TileOverlayOptions} options\n     * @return {TileOverlay}\n     */\n    /**\n       * Adds a tile overlay in synchronous\n       * @param options {TileOverlayOptions} options\n       * @return {TileOverlay}\n       */\n    GoogleMap.prototype.addTileOverlaySync = /**\n       * Adds a tile overlay in synchronous\n       * @param options {TileOverlayOptions} options\n       * @return {TileOverlay}\n       */\n    function (options) {\n        var _this = this;\n        var tileOverlay = this._objectInstance.addTileOverlay(options);\n        var overlayId = tileOverlay.getId();\n        var overlay = new TileOverlay(this, tileOverlay);\n        this.get('_overlays')[overlayId] = overlay;\n        tileOverlay.one(overlayId + '_remove', function () {\n            if (_this.get('_overlays')) {\n                _this.get('_overlays')[overlayId] = null;\n                overlay.destroy();\n            }\n        });\n        return overlay;\n    };\n    /**\n     * Adds a ground overlay\n     * @param options {GroundOverlayOptions} options\n     * @return {Promise<GroundOverlay>}\n     */\n    /**\n       * Adds a ground overlay\n       * @param options {GroundOverlayOptions} options\n       * @return {Promise<GroundOverlay>}\n       */\n    GoogleMap.prototype.addGroundOverlay = /**\n       * Adds a ground overlay\n       * @param options {GroundOverlayOptions} options\n       * @return {Promise<GroundOverlay>}\n       */\n    function (options) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this._objectInstance.addGroundOverlay(options, function (groundOverlay) {\n                if (groundOverlay) {\n                    var overlayId_7 = groundOverlay.getId();\n                    var overlay_7 = new GroundOverlay(_this, groundOverlay);\n                    _this.get('_overlays')[overlayId_7] = overlay_7;\n                    groundOverlay.one(overlayId_7 + '_remove', function () {\n                        if (_this.get('_overlays')) {\n                            _this.get('_overlays')[overlayId_7] = null;\n                            overlay_7.destroy();\n                        }\n                    });\n                    resolve(overlay_7);\n                }\n                else {\n                    reject();\n                }\n            });\n        });\n    };\n    /**\n     * Adds a ground overlay in synchronous\n     * @param options {GroundOverlayOptions} options\n     * @return {GroundOverlay}\n     */\n    /**\n       * Adds a ground overlay in synchronous\n       * @param options {GroundOverlayOptions} options\n       * @return {GroundOverlay}\n       */\n    GoogleMap.prototype.addGroundOverlaySync = /**\n       * Adds a ground overlay in synchronous\n       * @param options {GroundOverlayOptions} options\n       * @return {GroundOverlay}\n       */\n    function (options) {\n        var _this = this;\n        var groundOverlay = this._objectInstance.addGroundOverlay(options);\n        var overlayId = groundOverlay.getId();\n        var overlay = new GroundOverlay(this, groundOverlay);\n        this.get('_overlays')[overlayId] = overlay;\n        groundOverlay.one(overlayId + '_remove', function () {\n            if (_this.get('_overlays')) {\n                _this.get('_overlays')[overlayId] = null;\n                overlay.destroy();\n            }\n        });\n        return overlay;\n    };\n    /**\n     * Adds a kml overlay\n     * @param options {KmlOverlayOptions} options\n     * @return {Promise<KmlOverlay>}\n     */\n    /**\n       * Adds a kml overlay\n       * @param options {KmlOverlayOptions} options\n       * @return {Promise<KmlOverlay>}\n       */\n    GoogleMap.prototype.addKmlOverlay = /**\n       * Adds a kml overlay\n       * @param options {KmlOverlayOptions} options\n       * @return {Promise<KmlOverlay>}\n       */\n    function (options) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this._objectInstance.addKmlOverlay(options, function (kmlOverlay) {\n                if (kmlOverlay) {\n                    var overlayId_8 = kmlOverlay.getId();\n                    var overlay_8 = new KmlOverlay(_this, kmlOverlay);\n                    _this.get('_overlays')[overlayId_8] = overlay_8;\n                    kmlOverlay.one(overlayId_8 + '_remove', function () {\n                        if (_this.get('_overlays')) {\n                            _this.get('_overlays')[overlayId_8] = null;\n                            overlay_8.destroy();\n                        }\n                    });\n                    resolve(overlay_8);\n                }\n                else {\n                    reject();\n                }\n            });\n        });\n    };\n    /**\n     * Returns the base64 encoded screen capture of the map.\n     * @param options {ToDataUrlOptions} [options] options\n     * @return {Promise<string>}\n     */\n    /**\n       * Returns the base64 encoded screen capture of the map.\n       * @param options {ToDataUrlOptions} [options] options\n       * @return {Promise<string>}\n       */\n    GoogleMap.prototype.toDataURL = /**\n       * Returns the base64 encoded screen capture of the map.\n       * @param options {ToDataUrlOptions} [options] options\n       * @return {Promise<string>}\n       */\n    function (options) { return; };\n    __decorate([\n        InstanceCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], GoogleMap.prototype, \"setDiv\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", HTMLElement)\n    ], GoogleMap.prototype, \"getDiv\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String]),\n        __metadata(\"design:returntype\", void 0)\n    ], GoogleMap.prototype, \"setMapTypeId\", null);\n    __decorate([\n        CordovaInstance(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", Promise)\n    ], GoogleMap.prototype, \"animateCamera\", null);\n    __decorate([\n        CordovaInstance(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Promise)\n    ], GoogleMap.prototype, \"animateCameraZoomIn\", null);\n    __decorate([\n        CordovaInstance(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Promise)\n    ], GoogleMap.prototype, \"animateCameraZoomOut\", null);\n    __decorate([\n        CordovaInstance(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", Promise)\n    ], GoogleMap.prototype, \"moveCamera\", null);\n    __decorate([\n        CordovaInstance(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Promise)\n    ], GoogleMap.prototype, \"moveCameraZoomIn\", null);\n    __decorate([\n        CordovaInstance(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Promise)\n    ], GoogleMap.prototype, \"moveCameraZoomOut\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Object)\n    ], GoogleMap.prototype, \"getCameraPosition\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Object)\n    ], GoogleMap.prototype, \"getCameraTarget\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Number)\n    ], GoogleMap.prototype, \"getCameraZoom\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Number)\n    ], GoogleMap.prototype, \"getCameraBearing\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Number)\n    ], GoogleMap.prototype, \"getCameraTilt\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], GoogleMap.prototype, \"setCameraTarget\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number]),\n        __metadata(\"design:returntype\", void 0)\n    ], GoogleMap.prototype, \"setCameraZoom\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number]),\n        __metadata(\"design:returntype\", void 0)\n    ], GoogleMap.prototype, \"setCameraTilt\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], GoogleMap.prototype, \"setCameraBearing\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number, Number]),\n        __metadata(\"design:returntype\", void 0)\n    ], GoogleMap.prototype, \"panBy\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", VisibleRegion)\n    ], GoogleMap.prototype, \"getVisibleRegion\", null);\n    __decorate([\n        CordovaInstance(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", Promise)\n    ], GoogleMap.prototype, \"getMyLocation\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], GoogleMap.prototype, \"setClickable\", null);\n    __decorate([\n        CordovaInstance(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Promise)\n    ], GoogleMap.prototype, \"remove\", null);\n    __decorate([\n        InstanceCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Promise)\n    ], GoogleMap.prototype, \"clear\", null);\n    __decorate([\n        CordovaInstance(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", Promise)\n    ], GoogleMap.prototype, \"fromLatLngToPoint\", null);\n    __decorate([\n        CordovaInstance(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Array]),\n        __metadata(\"design:returntype\", Promise)\n    ], GoogleMap.prototype, \"fromPointToLatLng\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], GoogleMap.prototype, \"setMyLocationEnabled\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], GoogleMap.prototype, \"setMyLocationButtonEnabled\", null);\n    __decorate([\n        CordovaInstance(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Promise)\n    ], GoogleMap.prototype, \"getFocusedBuilding\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], GoogleMap.prototype, \"setIndoorEnabled\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], GoogleMap.prototype, \"setTrafficEnabled\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], GoogleMap.prototype, \"setCompassEnabled\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], GoogleMap.prototype, \"setAllGesturesEnabled\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], GoogleMap.prototype, \"setVisible\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number, Number, Number, Number]),\n        __metadata(\"design:returntype\", void 0)\n    ], GoogleMap.prototype, \"setPadding\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], GoogleMap.prototype, \"setOptions\", null);\n    __decorate([\n        InstanceCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", Promise)\n    ], GoogleMap.prototype, \"addMarker\", null);\n    __decorate([\n        InstanceCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", Marker)\n    ], GoogleMap.prototype, \"addMarkerSync\", null);\n    __decorate([\n        InstanceCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", Promise)\n    ], GoogleMap.prototype, \"addMarkerCluster\", null);\n    __decorate([\n        InstanceCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", MarkerCluster)\n    ], GoogleMap.prototype, \"addMarkerClusterSync\", null);\n    __decorate([\n        InstanceCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", Promise)\n    ], GoogleMap.prototype, \"addCircle\", null);\n    __decorate([\n        InstanceCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", Circle)\n    ], GoogleMap.prototype, \"addCircleSync\", null);\n    __decorate([\n        InstanceCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", Promise)\n    ], GoogleMap.prototype, \"addPolygon\", null);\n    __decorate([\n        InstanceCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", Polygon)\n    ], GoogleMap.prototype, \"addPolygonSync\", null);\n    __decorate([\n        InstanceCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", Promise)\n    ], GoogleMap.prototype, \"addPolyline\", null);\n    __decorate([\n        InstanceCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", Polyline)\n    ], GoogleMap.prototype, \"addPolylineSync\", null);\n    __decorate([\n        InstanceCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", Promise)\n    ], GoogleMap.prototype, \"addTileOverlay\", null);\n    __decorate([\n        InstanceCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", TileOverlay)\n    ], GoogleMap.prototype, \"addTileOverlaySync\", null);\n    __decorate([\n        InstanceCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", Promise)\n    ], GoogleMap.prototype, \"addGroundOverlay\", null);\n    __decorate([\n        InstanceCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", GroundOverlay)\n    ], GoogleMap.prototype, \"addGroundOverlaySync\", null);\n    __decorate([\n        InstanceCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", Promise)\n    ], GoogleMap.prototype, \"addKmlOverlay\", null);\n    __decorate([\n        CordovaInstance(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", Promise)\n    ], GoogleMap.prototype, \"toDataURL\", null);\n    /**\n     * @hidden\n     */\n    GoogleMap = __decorate([\n        Plugin({\n            pluginName: 'GoogleMaps',\n            plugin: 'cordova-plugin-googlemaps'\n        }),\n        __metadata(\"design:paramtypes\", [Object, Object])\n    ], GoogleMap);\n    return GoogleMap;\n}(BaseClass));\nexport { GoogleMap };\n/**\n * @hidden\n */\nvar GroundOverlay = (function (_super) {\n    __extends(GroundOverlay, _super);\n    function GroundOverlay(_map, _objectInstance) {\n        var _this = _super.call(this) || this;\n        _this._map = _map;\n        _this._objectInstance = _objectInstance;\n        return _this;\n    }\n    /**\n     * Returns the ID of instance.\n     * @return {string}\n     */\n    /**\n       * Returns the ID of instance.\n       * @return {string}\n       */\n    GroundOverlay.prototype.getId = /**\n       * Returns the ID of instance.\n       * @return {string}\n       */\n    function () { return; };\n    /**\n     * Returns the map instance.\n     * @return {GoogleMap}\n     */\n    /**\n       * Returns the map instance.\n       * @return {GoogleMap}\n       */\n    GroundOverlay.prototype.getMap = /**\n       * Returns the map instance.\n       * @return {GoogleMap}\n       */\n    function () { return this._map; };\n    /**\n     * Changes the bounds of the GroundOverlay\n     * @param bounds { ILatLng[]}\n     */\n    /**\n       * Changes the bounds of the GroundOverlay\n       * @param bounds { ILatLng[]}\n       */\n    GroundOverlay.prototype.setBounds = /**\n       * Changes the bounds of the GroundOverlay\n       * @param bounds { ILatLng[]}\n       */\n    function (bounds) { };\n    /**\n     * Changes the bearing of the ground overlay\n     * @param bearing {number}\n     */\n    /**\n       * Changes the bearing of the ground overlay\n       * @param bearing {number}\n       */\n    GroundOverlay.prototype.setBearing = /**\n       * Changes the bearing of the ground overlay\n       * @param bearing {number}\n       */\n    function (bearing) { };\n    /**\n     * Returns the current bearing value\n     */\n    /**\n       * Returns the current bearing value\n       */\n    GroundOverlay.prototype.getBearing = /**\n       * Returns the current bearing value\n       */\n    function () { return; };\n    /**\n     * Changes the image of the ground overlay\n     * @param imageUrl {string} URL of image\n     */\n    /**\n       * Changes the image of the ground overlay\n       * @param imageUrl {string} URL of image\n       */\n    GroundOverlay.prototype.setImage = /**\n       * Changes the image of the ground overlay\n       * @param imageUrl {string} URL of image\n       */\n    function (imageUrl) { };\n    ;\n    /**\n     * Changes the opacity of the ground overlay from 0.0 to 1.0\n     * @param opacity {number}\n     */\n    /**\n       * Changes the opacity of the ground overlay from 0.0 to 1.0\n       * @param opacity {number}\n       */\n    GroundOverlay.prototype.setOpacity = /**\n       * Changes the opacity of the ground overlay from 0.0 to 1.0\n       * @param opacity {number}\n       */\n    function (opacity) { };\n    /**\n     * Returns the current opacity\n     * @return {number}\n     */\n    /**\n       * Returns the current opacity\n       * @return {number}\n       */\n    GroundOverlay.prototype.getOpacity = /**\n       * Returns the current opacity\n       * @return {number}\n       */\n    function () { return; };\n    /**\n     * Changes click-ability of the ground overlay\n     * @param clickable {boolean}\n     */\n    /**\n       * Changes click-ability of the ground overlay\n       * @param clickable {boolean}\n       */\n    GroundOverlay.prototype.setClickable = /**\n       * Changes click-ability of the ground overlay\n       * @param clickable {boolean}\n       */\n    function (clickable) { };\n    /**\n     * Returns true if the ground overlay is clickable\n     * @return {boolean}\n     */\n    /**\n       * Returns true if the ground overlay is clickable\n       * @return {boolean}\n       */\n    GroundOverlay.prototype.getClickable = /**\n       * Returns true if the ground overlay is clickable\n       * @return {boolean}\n       */\n    function () { return; };\n    /**\n     * Changes visibility of the ground overlay\n     * @param visible {boolean}\n     */\n    /**\n       * Changes visibility of the ground overlay\n       * @param visible {boolean}\n       */\n    GroundOverlay.prototype.setVisible = /**\n       * Changes visibility of the ground overlay\n       * @param visible {boolean}\n       */\n    function (visible) { };\n    /**\n     * Returns true if the ground overlay is visible\n     * @return {boolean}\n     */\n    /**\n       * Returns true if the ground overlay is visible\n       * @return {boolean}\n       */\n    GroundOverlay.prototype.getVisible = /**\n       * Returns true if the ground overlay is visible\n       * @return {boolean}\n       */\n    function () { return; };\n    /**\n     * Changes the ground overlay zIndex order\n     * @param index {number}\n     */\n    /**\n       * Changes the ground overlay zIndex order\n       * @param index {number}\n       */\n    GroundOverlay.prototype.setZIndex = /**\n       * Changes the ground overlay zIndex order\n       * @param index {number}\n       */\n    function (index) { };\n    /**\n     * Returns the current ground overlay zIndex\n     * @return {number}\n     */\n    /**\n       * Returns the current ground overlay zIndex\n       * @return {number}\n       */\n    GroundOverlay.prototype.getZIndex = /**\n       * Returns the current ground overlay zIndex\n       * @return {number}\n       */\n    function () { return; };\n    /**\n     * Remove the ground overlay\n     */\n    /**\n       * Remove the ground overlay\n       */\n    GroundOverlay.prototype.remove = /**\n       * Remove the ground overlay\n       */\n    function () {\n        delete this._objectInstance.getMap().get('_overlays')[this.getId()];\n        this._objectInstance.remove();\n        this.destroy();\n    };\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", String)\n    ], GroundOverlay.prototype, \"getId\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Array]),\n        __metadata(\"design:returntype\", void 0)\n    ], GroundOverlay.prototype, \"setBounds\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number]),\n        __metadata(\"design:returntype\", void 0)\n    ], GroundOverlay.prototype, \"setBearing\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Number)\n    ], GroundOverlay.prototype, \"getBearing\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String]),\n        __metadata(\"design:returntype\", void 0)\n    ], GroundOverlay.prototype, \"setImage\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number]),\n        __metadata(\"design:returntype\", void 0)\n    ], GroundOverlay.prototype, \"setOpacity\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Number)\n    ], GroundOverlay.prototype, \"getOpacity\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], GroundOverlay.prototype, \"setClickable\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Boolean)\n    ], GroundOverlay.prototype, \"getClickable\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], GroundOverlay.prototype, \"setVisible\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Boolean)\n    ], GroundOverlay.prototype, \"getVisible\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number]),\n        __metadata(\"design:returntype\", void 0)\n    ], GroundOverlay.prototype, \"setZIndex\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Number)\n    ], GroundOverlay.prototype, \"getZIndex\", null);\n    __decorate([\n        CordovaCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], GroundOverlay.prototype, \"remove\", null);\n    return GroundOverlay;\n}(BaseClass));\nexport { GroundOverlay };\n/**\n * @hidden\n */\nvar HtmlInfoWindow = (function (_super) {\n    __extends(HtmlInfoWindow, _super);\n    function HtmlInfoWindow() {\n        var _this = _super.call(this) || this;\n        _this._objectInstance = new (GoogleMaps.getPlugin().HtmlInfoWindow)();\n        return _this;\n    }\n    /**\n     * Changes the backgroundColor\n     * @param color {string}\n     */\n    /**\n       * Changes the backgroundColor\n       * @param color {string}\n       */\n    HtmlInfoWindow.prototype.setBackgroundColor = /**\n       * Changes the backgroundColor\n       * @param color {string}\n       */\n    function (color) { };\n    /**\n     * Set your HTML contents.\n     * @param content {any} String containing text or HTML element\n     * @param cssOptions? {any} CSS styles for the container element of HTMLInfoWindow\n     */\n    /**\n       * Set your HTML contents.\n       * @param content {any} String containing text or HTML element\n       * @param cssOptions? {any} CSS styles for the container element of HTMLInfoWindow\n       */\n    HtmlInfoWindow.prototype.setContent = /**\n       * Set your HTML contents.\n       * @param content {any} String containing text or HTML element\n       * @param cssOptions? {any} CSS styles for the container element of HTMLInfoWindow\n       */\n    function (content, cssOptions) { };\n    /**\n     * Open the htmlInfoWindow\n     * @param marker {Marker}\n     */\n    /**\n       * Open the htmlInfoWindow\n       * @param marker {Marker}\n       */\n    HtmlInfoWindow.prototype.open = /**\n       * Open the htmlInfoWindow\n       * @param marker {Marker}\n       */\n    function (marker) { };\n    /**\n     * Close the htmlInfoWindow\n     */\n    /**\n       * Close the htmlInfoWindow\n       */\n    HtmlInfoWindow.prototype.close = /**\n       * Close the htmlInfoWindow\n       */\n    function () { };\n    __decorate([\n        CordovaInstance(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String]),\n        __metadata(\"design:returntype\", void 0)\n    ], HtmlInfoWindow.prototype, \"setBackgroundColor\", null);\n    __decorate([\n        CordovaInstance(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object, Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], HtmlInfoWindow.prototype, \"setContent\", null);\n    __decorate([\n        CordovaInstance(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", Object)\n    ], HtmlInfoWindow.prototype, \"open\", null);\n    __decorate([\n        CordovaInstance(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], HtmlInfoWindow.prototype, \"close\", null);\n    /**\n     * @hidden\n     */\n    HtmlInfoWindow = __decorate([\n        Plugin({\n            plugin: 'cordova-plugin-googlemaps',\n            pluginName: 'GoogleMaps',\n            pluginRef: 'plugin.google.maps.HtmlInfoWindow',\n            repo: ''\n        }),\n        __metadata(\"design:paramtypes\", [])\n    ], HtmlInfoWindow);\n    return HtmlInfoWindow;\n}(BaseClass));\nexport { HtmlInfoWindow };\n/**\n * @hidden\n */\nvar Marker = (function (_super) {\n    __extends(Marker, _super);\n    function Marker(_map, _objectInstance) {\n        var _this = _super.call(this) || this;\n        _this._map = _map;\n        _this._objectInstance = _objectInstance;\n        return _this;\n    }\n    /**\n     * Returns the ID of instance.\n     * @return {string}\n     */\n    /**\n       * Returns the ID of instance.\n       * @return {string}\n       */\n    Marker.prototype.getId = /**\n       * Returns the ID of instance.\n       * @return {string}\n       */\n    function () { return; };\n    /**\n     * Returns the map instance.\n     * @return {GoogleMap}\n     */\n    /**\n       * Returns the map instance.\n       * @return {GoogleMap}\n       */\n    Marker.prototype.getMap = /**\n       * Returns the map instance.\n       * @return {GoogleMap}\n       */\n    function () { return this._map; };\n    /**\n     * Set the marker position.\n     * @param latLng {ILatLng}\n     */\n    /**\n       * Set the marker position.\n       * @param latLng {ILatLng}\n       */\n    Marker.prototype.setPosition = /**\n       * Set the marker position.\n       * @param latLng {ILatLng}\n       */\n    function (latLng) { return; };\n    /**\n     * Returns the marker position.\n     * @return {ILatLng}\n     */\n    /**\n       * Returns the marker position.\n       * @return {ILatLng}\n       */\n    Marker.prototype.getPosition = /**\n       * Returns the marker position.\n       * @return {ILatLng}\n       */\n    function () { return; };\n    /**\n     * Show the normal infoWindow of the marker.\n     */\n    /**\n       * Show the normal infoWindow of the marker.\n       */\n    Marker.prototype.showInfoWindow = /**\n       * Show the normal infoWindow of the marker.\n       */\n    function () { };\n    /**\n     * Hide the normal infoWindow of the marker.\n     */\n    /**\n       * Hide the normal infoWindow of the marker.\n       */\n    Marker.prototype.hideInfoWindow = /**\n       * Hide the normal infoWindow of the marker.\n       */\n    function () { };\n    /**\n     * Specify the animation either `DROP` or `BOUNCE`\n     * @param animation {string}\n     */\n    /**\n       * Specify the animation either `DROP` or `BOUNCE`\n       * @param animation {string}\n       */\n    Marker.prototype.setAnimation = /**\n       * Specify the animation either `DROP` or `BOUNCE`\n       * @param animation {string}\n       */\n    function (animation) { };\n    /**\n     * Set true if you **do not want** to move the map when you click on the marker.\n     * @param disableAutoPan {boolean}\n     */\n    /**\n       * Set true if you **do not want** to move the map when you click on the marker.\n       * @param disableAutoPan {boolean}\n       */\n    Marker.prototype.setDisableAutoPan = /**\n       * Set true if you **do not want** to move the map when you click on the marker.\n       * @param disableAutoPan {boolean}\n       */\n    function (disableAutoPan) { };\n    /**\n     * Set false if you want to hide the marker.\n     * @param visible\n     */\n    /**\n       * Set false if you want to hide the marker.\n       * @param visible\n       */\n    Marker.prototype.setVisible = /**\n       * Set false if you want to hide the marker.\n       * @param visible\n       */\n    function (visible) { };\n    /**\n     * Returns true if the marker is visible\n     */\n    /**\n       * Returns true if the marker is visible\n       */\n    Marker.prototype.isVisible = /**\n       * Returns true if the marker is visible\n       */\n    function () { return; };\n    /**\n     * Changes title of the normal infoWindow.\n     * @param title {string}\n     */\n    /**\n       * Changes title of the normal infoWindow.\n       * @param title {string}\n       */\n    Marker.prototype.setTitle = /**\n       * Changes title of the normal infoWindow.\n       * @param title {string}\n       */\n    function (title) { };\n    /**\n     * Returns the title strings.\n     * @return {string}\n     */\n    /**\n       * Returns the title strings.\n       * @return {string}\n       */\n    Marker.prototype.getTitle = /**\n       * Returns the title strings.\n       * @return {string}\n       */\n    function () { return; };\n    /**\n     * Changes snippet of the normal infoWindow.\n     * @param snippet {string}\n     */\n    /**\n       * Changes snippet of the normal infoWindow.\n       * @param snippet {string}\n       */\n    Marker.prototype.setSnippet = /**\n       * Changes snippet of the normal infoWindow.\n       * @param snippet {string}\n       */\n    function (snippet) { };\n    /**\n     * Returns the snippet strings.\n     * @return {string}\n     */\n    /**\n       * Returns the snippet strings.\n       * @return {string}\n       */\n    Marker.prototype.getSnippet = /**\n       * Returns the snippet strings.\n       * @return {string}\n       */\n    function () { return; };\n    /**\n     * Changes the marker opacity from 0.0 to 1.0.\n     * @param alpha {number} Opacity\n     */\n    /**\n       * Changes the marker opacity from 0.0 to 1.0.\n       * @param alpha {number} Opacity\n       */\n    Marker.prototype.setOpacity = /**\n       * Changes the marker opacity from 0.0 to 1.0.\n       * @param alpha {number} Opacity\n       */\n    function (alpha) { };\n    /**\n     * Returns the marker opacity.\n     * @return {number} Opacity\n     */\n    /**\n       * Returns the marker opacity.\n       * @return {number} Opacity\n       */\n    Marker.prototype.getOpacity = /**\n       * Returns the marker opacity.\n       * @return {number} Opacity\n       */\n    function () { return; };\n    /**\n     * Remove the marker.\n     */\n    /**\n       * Remove the marker.\n       */\n    Marker.prototype.remove = /**\n       * Remove the marker.\n       */\n    function () {\n        delete this._objectInstance.getMap().get('_overlays')[this.getId()];\n        this._objectInstance.remove();\n        this.destroy();\n    };\n    /**\n     * Changes the info window anchor. This defaults to 50% from the left of the image and at the bottom of the image.\n     * @param x {number} Distance from left of the icon image in pixels.\n     * @param y {number} Distance from top of the icon image in pixels.\n     */\n    /**\n       * Changes the info window anchor. This defaults to 50% from the left of the image and at the bottom of the image.\n       * @param x {number} Distance from left of the icon image in pixels.\n       * @param y {number} Distance from top of the icon image in pixels.\n       */\n    Marker.prototype.setIconAnchor = /**\n       * Changes the info window anchor. This defaults to 50% from the left of the image and at the bottom of the image.\n       * @param x {number} Distance from left of the icon image in pixels.\n       * @param y {number} Distance from top of the icon image in pixels.\n       */\n    function (x, y) { };\n    /**\n     * Changes the info window anchor. This defaults to 50% from the left of the image and at the top of the image.\n     * @param x {number} Distance from left of the icon image in pixels.\n     * @param y {number} Distance from top of the icon image in pixels.\n     */\n    /**\n       * Changes the info window anchor. This defaults to 50% from the left of the image and at the top of the image.\n       * @param x {number} Distance from left of the icon image in pixels.\n       * @param y {number} Distance from top of the icon image in pixels.\n       */\n    Marker.prototype.setInfoWindowAnchor = /**\n       * Changes the info window anchor. This defaults to 50% from the left of the image and at the top of the image.\n       * @param x {number} Distance from left of the icon image in pixels.\n       * @param y {number} Distance from top of the icon image in pixels.\n       */\n    function (x, y) { };\n    /**\n     * Returns true if the infoWindow is shown on the marker\n     * @return {boolean}\n     */\n    /**\n       * Returns true if the infoWindow is shown on the marker\n       * @return {boolean}\n       */\n    Marker.prototype.isInfoWindowShown = /**\n       * Returns true if the infoWindow is shown on the marker\n       * @return {boolean}\n       */\n    function () { return; };\n    /**\n     * Higher zIndex value overlays will be drawn on top of lower zIndex value tile layers and overlays.\n     * @param y {number} z-index\n     */\n    /**\n       * Higher zIndex value overlays will be drawn on top of lower zIndex value tile layers and overlays.\n       * @param y {number} z-index\n       */\n    Marker.prototype.setZIndex = /**\n       * Higher zIndex value overlays will be drawn on top of lower zIndex value tile layers and overlays.\n       * @param y {number} z-index\n       */\n    function (zIndex) { };\n    /**\n     * Get z-index\n     * @return {number}\n     */\n    /**\n       * Get z-index\n       * @return {number}\n       */\n    Marker.prototype.getZIndex = /**\n       * Get z-index\n       * @return {number}\n       */\n    function () { return; };\n    /**\n     * Set true if you allow all users to drag the marker.\n     * @param draggable {boolean}\n     */\n    /**\n       * Set true if you allow all users to drag the marker.\n       * @param draggable {boolean}\n       */\n    Marker.prototype.setDraggable = /**\n       * Set true if you allow all users to drag the marker.\n       * @param draggable {boolean}\n       */\n    function (draggable) { };\n    /**\n     * Returns true if the marker drag is enabled.\n     * @return {boolean}\n     */\n    /**\n       * Returns true if the marker drag is enabled.\n       * @return {boolean}\n       */\n    Marker.prototype.isDraggable = /**\n       * Returns true if the marker drag is enabled.\n       * @return {boolean}\n       */\n    function () { return; };\n    /**\n     * Set true if you want to be flat marker.\n     * @param flat {boolean}\n     */\n    /**\n       * Set true if you want to be flat marker.\n       * @param flat {boolean}\n       */\n    Marker.prototype.setFlat = /**\n       * Set true if you want to be flat marker.\n       * @param flat {boolean}\n       */\n    function (flat) { return; };\n    /**\n     * Changes icon url and/or size\n     * @param icon\n     */\n    /**\n       * Changes icon url and/or size\n       * @param icon\n       */\n    Marker.prototype.setIcon = /**\n       * Changes icon url and/or size\n       * @param icon\n       */\n    function (icon) { return; };\n    /**\n     * Set the marker rotation angle.\n     * @param rotation {number}\n     */\n    /**\n       * Set the marker rotation angle.\n       * @param rotation {number}\n       */\n    Marker.prototype.setRotation = /**\n       * Set the marker rotation angle.\n       * @param rotation {number}\n       */\n    function (rotation) { };\n    /**\n     * Returns the marker rotation angle.\n     * @return {number}\n     */\n    /**\n       * Returns the marker rotation angle.\n       * @return {number}\n       */\n    Marker.prototype.getRotation = /**\n       * Returns the marker rotation angle.\n       * @return {number}\n       */\n    function () { return; };\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", String)\n    ], Marker.prototype, \"getId\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], Marker.prototype, \"setPosition\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Object)\n    ], Marker.prototype, \"getPosition\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], Marker.prototype, \"showInfoWindow\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], Marker.prototype, \"hideInfoWindow\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String]),\n        __metadata(\"design:returntype\", void 0)\n    ], Marker.prototype, \"setAnimation\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], Marker.prototype, \"setDisableAutoPan\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], Marker.prototype, \"setVisible\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Boolean)\n    ], Marker.prototype, \"isVisible\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String]),\n        __metadata(\"design:returntype\", void 0)\n    ], Marker.prototype, \"setTitle\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", String)\n    ], Marker.prototype, \"getTitle\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String]),\n        __metadata(\"design:returntype\", void 0)\n    ], Marker.prototype, \"setSnippet\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", String)\n    ], Marker.prototype, \"getSnippet\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number]),\n        __metadata(\"design:returntype\", void 0)\n    ], Marker.prototype, \"setOpacity\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Number)\n    ], Marker.prototype, \"getOpacity\", null);\n    __decorate([\n        CordovaCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], Marker.prototype, \"remove\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number, Number]),\n        __metadata(\"design:returntype\", void 0)\n    ], Marker.prototype, \"setIconAnchor\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number, Number]),\n        __metadata(\"design:returntype\", void 0)\n    ], Marker.prototype, \"setInfoWindowAnchor\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Boolean)\n    ], Marker.prototype, \"isInfoWindowShown\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number]),\n        __metadata(\"design:returntype\", void 0)\n    ], Marker.prototype, \"setZIndex\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Number)\n    ], Marker.prototype, \"getZIndex\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], Marker.prototype, \"setDraggable\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Boolean)\n    ], Marker.prototype, \"isDraggable\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], Marker.prototype, \"setFlat\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], Marker.prototype, \"setIcon\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number]),\n        __metadata(\"design:returntype\", void 0)\n    ], Marker.prototype, \"setRotation\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Number)\n    ], Marker.prototype, \"getRotation\", null);\n    return Marker;\n}(BaseClass));\nexport { Marker };\n/**\n * @hidden\n */\nvar MarkerCluster = (function (_super) {\n    __extends(MarkerCluster, _super);\n    function MarkerCluster(_map, _objectInstance) {\n        var _this = _super.call(this) || this;\n        _this._map = _map;\n        _this._objectInstance = _objectInstance;\n        return _this;\n    }\n    /**\n     * Returns the ID of instance.\n     * @return {string}\n     */\n    /**\n       * Returns the ID of instance.\n       * @return {string}\n       */\n    MarkerCluster.prototype.getId = /**\n       * Returns the ID of instance.\n       * @return {string}\n       */\n    function () { return; };\n    /**\n     * Add one marker location\n     * @param marker {MarkerOptions} one location\n     * @param skipRedraw? {boolean} marker cluster does not redraw the marker cluster if true.\n     */\n    /**\n       * Add one marker location\n       * @param marker {MarkerOptions} one location\n       * @param skipRedraw? {boolean} marker cluster does not redraw the marker cluster if true.\n       */\n    MarkerCluster.prototype.addMarker = /**\n       * Add one marker location\n       * @param marker {MarkerOptions} one location\n       * @param skipRedraw? {boolean} marker cluster does not redraw the marker cluster if true.\n       */\n    function (marker, skipRedraw) { };\n    /**\n     * Add marker locations\n     * @param markers {MarkerOptions[]} multiple location\n     */\n    /**\n       * Add marker locations\n       * @param markers {MarkerOptions[]} multiple location\n       */\n    MarkerCluster.prototype.addMarkers = /**\n       * Add marker locations\n       * @param markers {MarkerOptions[]} multiple location\n       */\n    function (markers) { };\n    /**\n     * Remove the marker cluster\n     */\n    /**\n       * Remove the marker cluster\n       */\n    MarkerCluster.prototype.remove = /**\n       * Remove the marker cluster\n       */\n    function () {\n        this._objectInstance.set('_overlays', undefined);\n        delete this._objectInstance.getMap().get('_overlays')[this.getId()];\n        this._objectInstance.remove();\n        this.destroy();\n    };\n    /**\n     * Returns the map instance.\n     * @return {GoogleMap}\n     */\n    /**\n       * Returns the map instance.\n       * @return {GoogleMap}\n       */\n    MarkerCluster.prototype.getMap = /**\n       * Returns the map instance.\n       * @return {GoogleMap}\n       */\n    function () { return this._map; };\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", String)\n    ], MarkerCluster.prototype, \"getId\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object, Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], MarkerCluster.prototype, \"addMarker\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Array]),\n        __metadata(\"design:returntype\", void 0)\n    ], MarkerCluster.prototype, \"addMarkers\", null);\n    __decorate([\n        InstanceCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], MarkerCluster.prototype, \"remove\", null);\n    return MarkerCluster;\n}(BaseClass));\nexport { MarkerCluster };\n/**\n * @hidden\n */\nvar Polygon = (function (_super) {\n    __extends(Polygon, _super);\n    function Polygon(_map, _objectInstance) {\n        var _this = _super.call(this) || this;\n        _this._map = _map;\n        _this._objectInstance = _objectInstance;\n        return _this;\n    }\n    /**\n     * Returns the ID of instance.\n     * @return {string}\n     */\n    /**\n       * Returns the ID of instance.\n       * @return {string}\n       */\n    Polygon.prototype.getId = /**\n       * Returns the ID of instance.\n       * @return {string}\n       */\n    function () { return; };\n    /**\n     * Returns the map instance.\n     * @return {GoogleMap}\n     */\n    /**\n       * Returns the map instance.\n       * @return {GoogleMap}\n       */\n    Polygon.prototype.getMap = /**\n       * Returns the map instance.\n       * @return {GoogleMap}\n       */\n    function () { return this._map; };\n    /**\n     * Changes the polygon points.\n     * @param points {ILatLng[]}\n     */\n    /**\n       * Changes the polygon points.\n       * @param points {ILatLng[]}\n       */\n    Polygon.prototype.setPoints = /**\n       * Changes the polygon points.\n       * @param points {ILatLng[]}\n       */\n    function (points) { };\n    /**\n     * Returns an instance of the BaseArrayClass.\n     * You can modify the points.\n     * @return {BaseArrayClass<ILatLng>}\n     */\n    /**\n       * Returns an instance of the BaseArrayClass.\n       * You can modify the points.\n       * @return {BaseArrayClass<ILatLng>}\n       */\n    Polygon.prototype.getPoints = /**\n       * Returns an instance of the BaseArrayClass.\n       * You can modify the points.\n       * @return {BaseArrayClass<ILatLng>}\n       */\n    function () {\n        return new BaseArrayClass(this._objectInstance.getPoints());\n    };\n    /**\n     * Changes the polygon holes.\n     * @param holes {ILatLng[][]}\n     */\n    /**\n       * Changes the polygon holes.\n       * @param holes {ILatLng[][]}\n       */\n    Polygon.prototype.setHoles = /**\n       * Changes the polygon holes.\n       * @param holes {ILatLng[][]}\n       */\n    function (holes) { };\n    /**\n     * Returns an instance of the BaseArrayClass.\n     * You can modify the holes.\n     * @return {BaseArrayClass<ILatLng[]>}\n     */\n    /**\n       * Returns an instance of the BaseArrayClass.\n       * You can modify the holes.\n       * @return {BaseArrayClass<ILatLng[]>}\n       */\n    Polygon.prototype.getHoles = /**\n       * Returns an instance of the BaseArrayClass.\n       * You can modify the holes.\n       * @return {BaseArrayClass<ILatLng[]>}\n       */\n    function () {\n        var holes = this._objectInstance.getPoints();\n        var results = new BaseArrayClass();\n        holes.forEach(function (hole) {\n            results.push(hole);\n        });\n        return results;\n    };\n    /**\n     * Changes the filling color (inner color)\n     * @param fillColor {string}\n     */\n    /**\n       * Changes the filling color (inner color)\n       * @param fillColor {string}\n       */\n    Polygon.prototype.setFillColor = /**\n       * Changes the filling color (inner color)\n       * @param fillColor {string}\n       */\n    function (fillColor) { };\n    /**\n     * Returns the current polygon filling color (inner color).\n     * @return {string}\n     */\n    /**\n       * Returns the current polygon filling color (inner color).\n       * @return {string}\n       */\n    Polygon.prototype.getFillColor = /**\n       * Returns the current polygon filling color (inner color).\n       * @return {string}\n       */\n    function () { return; };\n    /**\n     * Changes the stroke color (outer color)\n     * @param strokeColor {string}\n     */\n    /**\n       * Changes the stroke color (outer color)\n       * @param strokeColor {string}\n       */\n    Polygon.prototype.setStrokeColor = /**\n       * Changes the stroke color (outer color)\n       * @param strokeColor {string}\n       */\n    function (strokeColor) { };\n    /**\n     * Returns the current polygon stroke color (outer color)\n     * @return {string}\n     */\n    /**\n       * Returns the current polygon stroke color (outer color)\n       * @return {string}\n       */\n    Polygon.prototype.getStrokeColor = /**\n       * Returns the current polygon stroke color (outer color)\n       * @return {string}\n       */\n    function () { return; };\n    /**\n     * Changes click-ability of the polygon\n     * @param clickable {boolean}\n     */\n    /**\n       * Changes click-ability of the polygon\n       * @param clickable {boolean}\n       */\n    Polygon.prototype.setClickable = /**\n       * Changes click-ability of the polygon\n       * @param clickable {boolean}\n       */\n    function (clickable) { };\n    /**\n     * Returns true if the polygon is clickable\n     */\n    /**\n       * Returns true if the polygon is clickable\n       */\n    Polygon.prototype.getClickable = /**\n       * Returns true if the polygon is clickable\n       */\n    function () { return; };\n    /**\n     * Changes visibility of the polygon\n     * @param visible {boolean}\n     */\n    /**\n       * Changes visibility of the polygon\n       * @param visible {boolean}\n       */\n    Polygon.prototype.setVisible = /**\n       * Changes visibility of the polygon\n       * @param visible {boolean}\n       */\n    function (visible) { };\n    /**\n     * Returns true if the polygon is visible\n     * @return {boolean}\n     */\n    /**\n       * Returns true if the polygon is visible\n       * @return {boolean}\n       */\n    Polygon.prototype.getVisible = /**\n       * Returns true if the polygon is visible\n       * @return {boolean}\n       */\n    function () { return; };\n    /**\n     * Changes the polygon zIndex order.\n     * @param zIndex {number}\n     */\n    /**\n       * Changes the polygon zIndex order.\n       * @param zIndex {number}\n       */\n    Polygon.prototype.setZIndex = /**\n       * Changes the polygon zIndex order.\n       * @param zIndex {number}\n       */\n    function (zIndex) { };\n    /**\n     * Returns the current polygon zIndex\n     * @return {number}\n     */\n    /**\n       * Returns the current polygon zIndex\n       * @return {number}\n       */\n    Polygon.prototype.getZIndex = /**\n       * Returns the current polygon zIndex\n       * @return {number}\n       */\n    function () { return; };\n    /**\n     * Remove the polygon.\n     */\n    /**\n       * Remove the polygon.\n       */\n    Polygon.prototype.remove = /**\n       * Remove the polygon.\n       */\n    function () {\n        delete this._objectInstance.getMap().get('_overlays')[this.getId()];\n        this._objectInstance.remove();\n        this.destroy();\n    };\n    /**\n     * Changes the polygon stroke width\n     */\n    /**\n       * Changes the polygon stroke width\n       */\n    Polygon.prototype.setStrokeWidth = /**\n       * Changes the polygon stroke width\n       */\n    function (strokeWidth) { };\n    /**\n     * Returns the polygon stroke width\n     */\n    /**\n       * Returns the polygon stroke width\n       */\n    Polygon.prototype.getStrokeWidth = /**\n       * Returns the polygon stroke width\n       */\n    function () { return; };\n    /**\n     * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of the Earth.\n     * @param geodesic {boolean}\n     */\n    /**\n       * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of the Earth.\n       * @param geodesic {boolean}\n       */\n    Polygon.prototype.setGeodesic = /**\n       * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of the Earth.\n       * @param geodesic {boolean}\n       */\n    function (geodesic) { };\n    /**\n     * Returns true if the polygon is geodesic.\n     * @return {boolean}\n     */\n    /**\n       * Returns true if the polygon is geodesic.\n       * @return {boolean}\n       */\n    Polygon.prototype.getGeodesic = /**\n       * Returns true if the polygon is geodesic.\n       * @return {boolean}\n       */\n    function () { return; };\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", String)\n    ], Polygon.prototype, \"getId\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Array]),\n        __metadata(\"design:returntype\", void 0)\n    ], Polygon.prototype, \"setPoints\", null);\n    __decorate([\n        CordovaCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", BaseArrayClass)\n    ], Polygon.prototype, \"getPoints\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Array]),\n        __metadata(\"design:returntype\", void 0)\n    ], Polygon.prototype, \"setHoles\", null);\n    __decorate([\n        CordovaCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", BaseArrayClass)\n    ], Polygon.prototype, \"getHoles\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String]),\n        __metadata(\"design:returntype\", void 0)\n    ], Polygon.prototype, \"setFillColor\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", String)\n    ], Polygon.prototype, \"getFillColor\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String]),\n        __metadata(\"design:returntype\", void 0)\n    ], Polygon.prototype, \"setStrokeColor\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", String)\n    ], Polygon.prototype, \"getStrokeColor\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], Polygon.prototype, \"setClickable\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Boolean)\n    ], Polygon.prototype, \"getClickable\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], Polygon.prototype, \"setVisible\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Boolean)\n    ], Polygon.prototype, \"getVisible\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number]),\n        __metadata(\"design:returntype\", void 0)\n    ], Polygon.prototype, \"setZIndex\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Number)\n    ], Polygon.prototype, \"getZIndex\", null);\n    __decorate([\n        InstanceCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], Polygon.prototype, \"remove\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number]),\n        __metadata(\"design:returntype\", void 0)\n    ], Polygon.prototype, \"setStrokeWidth\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Number)\n    ], Polygon.prototype, \"getStrokeWidth\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], Polygon.prototype, \"setGeodesic\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Boolean)\n    ], Polygon.prototype, \"getGeodesic\", null);\n    return Polygon;\n}(BaseClass));\nexport { Polygon };\n/**\n * @hidden\n */\nvar Polyline = (function (_super) {\n    __extends(Polyline, _super);\n    function Polyline(_map, _objectInstance) {\n        var _this = _super.call(this) || this;\n        _this._map = _map;\n        _this._objectInstance = _objectInstance;\n        return _this;\n    }\n    /**\n     * Returns the ID of instance.\n     * @return {string}\n     */\n    /**\n       * Returns the ID of instance.\n       * @return {string}\n       */\n    Polyline.prototype.getId = /**\n       * Returns the ID of instance.\n       * @return {string}\n       */\n    function () { return; };\n    /**\n     * Returns the map instance.\n     * @return {GoogleMap}\n     */\n    /**\n       * Returns the map instance.\n       * @return {GoogleMap}\n       */\n    Polyline.prototype.getMap = /**\n       * Returns the map instance.\n       * @return {GoogleMap}\n       */\n    function () { return this._map; };\n    /**\n     * Changes the polyline points.\n     * @param points {ILatLng[]}\n     */\n    /**\n       * Changes the polyline points.\n       * @param points {ILatLng[]}\n       */\n    Polyline.prototype.setPoints = /**\n       * Changes the polyline points.\n       * @param points {ILatLng[]}\n       */\n    function (points) { };\n    /**\n     * Returns an instance of the BaseArrayClass\n     * You can modify the points.\n     * @return {BaseArrayClass<ILatLng>}\n     */\n    /**\n       * Returns an instance of the BaseArrayClass\n       * You can modify the points.\n       * @return {BaseArrayClass<ILatLng>}\n       */\n    Polyline.prototype.getPoints = /**\n       * Returns an instance of the BaseArrayClass\n       * You can modify the points.\n       * @return {BaseArrayClass<ILatLng>}\n       */\n    function () {\n        return new BaseArrayClass(this._objectInstance.getPoints());\n    };\n    /**\n     * When true, edges of the polyline are interpreted as geodesic and will follow the curvature of the Earth.\n     * @param geoDesic {boolean}\n     */\n    /**\n       * When true, edges of the polyline are interpreted as geodesic and will follow the curvature of the Earth.\n       * @param geoDesic {boolean}\n       */\n    Polyline.prototype.setGeoDesic = /**\n       * When true, edges of the polyline are interpreted as geodesic and will follow the curvature of the Earth.\n       * @param geoDesic {boolean}\n       */\n    function (geoDesic) { };\n    /**\n     * Returns true if the polyline is geodesic\n     */\n    /**\n       * Returns true if the polyline is geodesic\n       */\n    Polyline.prototype.getGeodesic = /**\n       * Returns true if the polyline is geodesic\n       */\n    function () { return; };\n    /**\n     * Changes visibility of the polyline\n     * @param visible {boolean}\n     */\n    /**\n       * Changes visibility of the polyline\n       * @param visible {boolean}\n       */\n    Polyline.prototype.setVisible = /**\n       * Changes visibility of the polyline\n       * @param visible {boolean}\n       */\n    function (visible) { };\n    /**\n     * Returns true if the polyline is visible\n     * @return {boolean}\n     */\n    /**\n       * Returns true if the polyline is visible\n       * @return {boolean}\n       */\n    Polyline.prototype.getVisible = /**\n       * Returns true if the polyline is visible\n       * @return {boolean}\n       */\n    function () { return; };\n    /**\n     * Changes click-ability of the polyline\n     * @param clickable {boolean}\n     */\n    /**\n       * Changes click-ability of the polyline\n       * @param clickable {boolean}\n       */\n    Polyline.prototype.setClickable = /**\n       * Changes click-ability of the polyline\n       * @param clickable {boolean}\n       */\n    function (clickable) { };\n    /**\n     * Returns true if the polyline is clickable\n     * @return {boolean}\n     */\n    /**\n       * Returns true if the polyline is clickable\n       * @return {boolean}\n       */\n    Polyline.prototype.getClickable = /**\n       * Returns true if the polyline is clickable\n       * @return {boolean}\n       */\n    function () { return; };\n    /**\n     * Changes the polyline color\n     * @param strokeColor {string}\n     */\n    /**\n       * Changes the polyline color\n       * @param strokeColor {string}\n       */\n    Polyline.prototype.setStrokeColor = /**\n       * Changes the polyline color\n       * @param strokeColor {string}\n       */\n    function (strokeColor) { };\n    /**\n     * Returns the current polyline color\n     * @return {string}\n     */\n    /**\n       * Returns the current polyline color\n       * @return {string}\n       */\n    Polyline.prototype.getStrokeColor = /**\n       * Returns the current polyline color\n       * @return {string}\n       */\n    function () { return; };\n    /**\n     * Changes the polyline stroke width\n     * @param strokeWidth {number}\n     */\n    /**\n       * Changes the polyline stroke width\n       * @param strokeWidth {number}\n       */\n    Polyline.prototype.setStrokeWidth = /**\n       * Changes the polyline stroke width\n       * @param strokeWidth {number}\n       */\n    function (strokeWidth) { };\n    /**\n     * Returns the current stroke width (unit: pixel).\n     * @return {number}\n     */\n    /**\n       * Returns the current stroke width (unit: pixel).\n       * @return {number}\n       */\n    Polyline.prototype.getStrokeWidth = /**\n       * Returns the current stroke width (unit: pixel).\n       * @return {number}\n       */\n    function () { return; };\n    /**\n     * Changes the polyline zIndex order.\n     * @param index {number}\n     */\n    /**\n       * Changes the polyline zIndex order.\n       * @param index {number}\n       */\n    Polyline.prototype.setZIndex = /**\n       * Changes the polyline zIndex order.\n       * @param index {number}\n       */\n    function (index) { };\n    /**\n     * Returns the current polyline zIndex\n     * @return {number}\n     */\n    /**\n       * Returns the current polyline zIndex\n       * @return {number}\n       */\n    Polyline.prototype.getZIndex = /**\n       * Returns the current polyline zIndex\n       * @return {number}\n       */\n    function () { return; };\n    /**\n     * Remove the polyline\n     */\n    /**\n       * Remove the polyline\n       */\n    Polyline.prototype.remove = /**\n       * Remove the polyline\n       */\n    function () {\n        delete this._objectInstance.getMap().get('_overlays')[this.getId()];\n        this._objectInstance.remove();\n        this.destroy();\n    };\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", String)\n    ], Polyline.prototype, \"getId\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Array]),\n        __metadata(\"design:returntype\", void 0)\n    ], Polyline.prototype, \"setPoints\", null);\n    __decorate([\n        CordovaCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", BaseArrayClass)\n    ], Polyline.prototype, \"getPoints\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], Polyline.prototype, \"setGeoDesic\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Boolean)\n    ], Polyline.prototype, \"getGeodesic\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], Polyline.prototype, \"setVisible\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Boolean)\n    ], Polyline.prototype, \"getVisible\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], Polyline.prototype, \"setClickable\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Boolean)\n    ], Polyline.prototype, \"getClickable\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [String]),\n        __metadata(\"design:returntype\", void 0)\n    ], Polyline.prototype, \"setStrokeColor\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", String)\n    ], Polyline.prototype, \"getStrokeColor\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number]),\n        __metadata(\"design:returntype\", void 0)\n    ], Polyline.prototype, \"setStrokeWidth\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Number)\n    ], Polyline.prototype, \"getStrokeWidth\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number]),\n        __metadata(\"design:returntype\", void 0)\n    ], Polyline.prototype, \"setZIndex\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Number)\n    ], Polyline.prototype, \"getZIndex\", null);\n    __decorate([\n        InstanceCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], Polyline.prototype, \"remove\", null);\n    return Polyline;\n}(BaseClass));\nexport { Polyline };\n/**\n * @hidden\n */\nvar TileOverlay = (function (_super) {\n    __extends(TileOverlay, _super);\n    function TileOverlay(_map, _objectInstance) {\n        var _this = _super.call(this) || this;\n        _this._map = _map;\n        _this._objectInstance = _objectInstance;\n        return _this;\n    }\n    /**\n     * Returns the ID of instance.\n     * @return {string}\n     */\n    /**\n       * Returns the ID of instance.\n       * @return {string}\n       */\n    TileOverlay.prototype.getId = /**\n       * Returns the ID of instance.\n       * @return {string}\n       */\n    function () { return; };\n    /**\n     * Returns the map instance.\n     * @return {GoogleMap}\n     */\n    /**\n       * Returns the map instance.\n       * @return {GoogleMap}\n       */\n    TileOverlay.prototype.getMap = /**\n       * Returns the map instance.\n       * @return {GoogleMap}\n       */\n    function () { return this._map; };\n    /**\n     * Set whether the tiles should fade in.\n     * @param fadeIn {boolean}\n     */\n    /**\n       * Set whether the tiles should fade in.\n       * @param fadeIn {boolean}\n       */\n    TileOverlay.prototype.setFadeIn = /**\n       * Set whether the tiles should fade in.\n       * @param fadeIn {boolean}\n       */\n    function (fadeIn) { };\n    /**\n     * Get whether the tiles should fade in\n     * @return {boolean}\n     */\n    /**\n       * Get whether the tiles should fade in\n       * @return {boolean}\n       */\n    TileOverlay.prototype.getFadeIn = /**\n       * Get whether the tiles should fade in\n       * @return {boolean}\n       */\n    function () { return; };\n    /**\n     * Set the zIndex of the tile overlay\n     * @param zIndex {number}\n     */\n    /**\n       * Set the zIndex of the tile overlay\n       * @param zIndex {number}\n       */\n    TileOverlay.prototype.setZIndex = /**\n       * Set the zIndex of the tile overlay\n       * @param zIndex {number}\n       */\n    function (zIndex) { };\n    /**\n     * Returns the zIndex of the tile overlay\n     * @return {number}\n     */\n    /**\n       * Returns the zIndex of the tile overlay\n       * @return {number}\n       */\n    TileOverlay.prototype.getZIndex = /**\n       * Returns the zIndex of the tile overlay\n       * @return {number}\n       */\n    function () { return; };\n    /**\n     * Set the opacity of the tile overlay\n     * @param opacity {number}\n     */\n    /**\n       * Set the opacity of the tile overlay\n       * @param opacity {number}\n       */\n    TileOverlay.prototype.setOpacity = /**\n       * Set the opacity of the tile overlay\n       * @param opacity {number}\n       */\n    function (opacity) { };\n    /**\n     * Returns the opacity of the tile overlay\n     * @return {number}\n     */\n    /**\n       * Returns the opacity of the tile overlay\n       * @return {number}\n       */\n    TileOverlay.prototype.getOpacity = /**\n       * Returns the opacity of the tile overlay\n       * @return {number}\n       */\n    function () { return; };\n    /**\n     * Set false if you want to hide\n     * @param visible {boolean}\n     */\n    /**\n       * Set false if you want to hide\n       * @param visible {boolean}\n       */\n    TileOverlay.prototype.setVisible = /**\n       * Set false if you want to hide\n       * @param visible {boolean}\n       */\n    function (visible) { };\n    /**\n     * Returns true if the tile overlay is visible\n     * @return {boolean}\n     */\n    /**\n       * Returns true if the tile overlay is visible\n       * @return {boolean}\n       */\n    TileOverlay.prototype.getVisible = /**\n       * Returns true if the tile overlay is visible\n       * @return {boolean}\n       */\n    function () { return; };\n    /**\n     * Get tile size\n     */\n    /**\n       * Get tile size\n       */\n    TileOverlay.prototype.getTileSize = /**\n       * Get tile size\n       */\n    function () { return; };\n    /**\n     * Remove the tile overlay\n     */\n    /**\n       * Remove the tile overlay\n       */\n    TileOverlay.prototype.remove = /**\n       * Remove the tile overlay\n       */\n    function () {\n        delete this._objectInstance.getMap().get('_overlays')[this.getId()];\n        this._objectInstance.remove();\n        this.destroy();\n    };\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", String)\n    ], TileOverlay.prototype, \"getId\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], TileOverlay.prototype, \"setFadeIn\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Boolean)\n    ], TileOverlay.prototype, \"getFadeIn\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number]),\n        __metadata(\"design:returntype\", void 0)\n    ], TileOverlay.prototype, \"setZIndex\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Number)\n    ], TileOverlay.prototype, \"getZIndex\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number]),\n        __metadata(\"design:returntype\", void 0)\n    ], TileOverlay.prototype, \"setOpacity\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Number)\n    ], TileOverlay.prototype, \"getOpacity\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], TileOverlay.prototype, \"setVisible\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Boolean)\n    ], TileOverlay.prototype, \"getVisible\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Object)\n    ], TileOverlay.prototype, \"getTileSize\", null);\n    __decorate([\n        CordovaCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], TileOverlay.prototype, \"remove\", null);\n    return TileOverlay;\n}(BaseClass));\nexport { TileOverlay };\n/**\n * @hidden\n */\nvar KmlOverlay = (function (_super) {\n    __extends(KmlOverlay, _super);\n    function KmlOverlay(_map, _objectInstance) {\n        var _this = _super.call(this) || this;\n        _this._map = _map;\n        _this._objectInstance = _objectInstance;\n        Object.defineProperty(self, 'camera', {\n            value: _this._objectInstance.camera,\n            writable: false\n        });\n        Object.defineProperty(self, 'kmlData', {\n            value: _this._objectInstance.kmlData,\n            writable: false\n        });\n        return _this;\n    }\n    /**\n     * Returns the viewport to contains all overlays\n     */\n    /**\n       * Returns the viewport to contains all overlays\n       */\n    KmlOverlay.prototype.getDefaultViewport = /**\n       * Returns the viewport to contains all overlays\n       */\n    function () { return; };\n    /**\n     * Returns the ID of instance.\n     * @return {string}\n     */\n    /**\n       * Returns the ID of instance.\n       * @return {string}\n       */\n    KmlOverlay.prototype.getId = /**\n       * Returns the ID of instance.\n       * @return {string}\n       */\n    function () { return; };\n    /**\n     * Returns the map instance.\n     * @return {GoogleMap}\n     */\n    /**\n       * Returns the map instance.\n       * @return {GoogleMap}\n       */\n    KmlOverlay.prototype.getMap = /**\n       * Returns the map instance.\n       * @return {GoogleMap}\n       */\n    function () { return this._map; };\n    /**\n     * Changes visibility of the kml overlay\n     * @param visible {boolean}\n     */\n    /**\n       * Changes visibility of the kml overlay\n       * @param visible {boolean}\n       */\n    KmlOverlay.prototype.setVisible = /**\n       * Changes visibility of the kml overlay\n       * @param visible {boolean}\n       */\n    function (visible) { };\n    /**\n     * Returns true if the kml overlay is visible\n     * @return {boolean}\n     */\n    /**\n       * Returns true if the kml overlay is visible\n       * @return {boolean}\n       */\n    KmlOverlay.prototype.getVisible = /**\n       * Returns true if the kml overlay is visible\n       * @return {boolean}\n       */\n    function () { return; };\n    /**\n     * Changes click-ability of the KmlOverlay\n     * @param clickable {boolean}\n     */\n    /**\n       * Changes click-ability of the KmlOverlay\n       * @param clickable {boolean}\n       */\n    KmlOverlay.prototype.setClickable = /**\n       * Changes click-ability of the KmlOverlay\n       * @param clickable {boolean}\n       */\n    function (clickable) { };\n    /**\n     * Returns true if the KmlOverlay is clickable\n     * @return {boolean}\n     */\n    /**\n       * Returns true if the KmlOverlay is clickable\n       * @return {boolean}\n       */\n    KmlOverlay.prototype.getClickable = /**\n       * Returns true if the KmlOverlay is clickable\n       * @return {boolean}\n       */\n    function () { return; };\n    /**\n     * Remove the KmlOverlay\n     */\n    /**\n       * Remove the KmlOverlay\n       */\n    KmlOverlay.prototype.remove = /**\n       * Remove the KmlOverlay\n       */\n    function () {\n        delete this._objectInstance.getMap().get('_overlays')[this.getId()];\n        this._objectInstance.remove();\n        this.destroy();\n    };\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Object)\n    ], KmlOverlay.prototype, \"getDefaultViewport\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", String)\n    ], KmlOverlay.prototype, \"getId\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], KmlOverlay.prototype, \"setVisible\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Boolean)\n    ], KmlOverlay.prototype, \"getVisible\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], KmlOverlay.prototype, \"setClickable\", null);\n    __decorate([\n        CordovaInstance({ sync: true }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Boolean)\n    ], KmlOverlay.prototype, \"getClickable\", null);\n    __decorate([\n        InstanceCheck(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], KmlOverlay.prototype, \"remove\", null);\n    return KmlOverlay;\n}(BaseClass));\nexport { KmlOverlay };\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@ionic-native/google-maps/index.js\n// module id = 374\n// module chunks = 9","import { Component } from '@angular/core';\r\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\r\nimport { Geolocation } from '@ionic-native/geolocation';\r\nimport { ViewChild } from '@angular/core';\r\nimport { Slides } from 'ionic-angular';\r\n\r\nimport {\r\n  GoogleMaps,\r\n  GoogleMap,\r\n  GoogleMapsEvent,\r\n  GoogleMapOptions,\r\n  CameraPosition,\r\n  MarkerOptions,\r\n  Marker\r\n} from '@ionic-native/google-maps';\r\n\r\n/**\r\n * Generated class for the ProfilePage page.\r\n *\r\n * See https://ionicframework.com/docs/components/#navigation for more info on\r\n * Ionic pages and navigation.\r\n */\r\n\r\n@IonicPage()\r\n@Component({\r\n  selector: 'page-profile',\r\n  templateUrl: 'profile.html',\r\n})\r\nexport class ProfilePage {\r\n  map: GoogleMap;\r\n  user: any = {}\r\n  constructor(public navCtrl: NavController, public navParams: NavParams, private geolocation: Geolocation) {\r\n  }\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    //Called after ngAfterContentInit when the component's view has been initialized. Applies to components only.\r\n    //Add 'implements AfterViewInit' to the class.\r\n    this.loadMap()\r\n  }\r\n  ionViewDidLoad() {\r\n\r\n\r\n    console.log('ionViewDidLoad ProfileFivePage', this.navParams.data);\r\n    let result = this.navParams.data.data\r\n    this.user = {\r\n      name: result.firstname + result.lastname,\r\n      profileImage: result.profile_image,\r\n      coverImage: '',\r\n      occupation: result.shopname,\r\n      location: result.city + result.state + result.country,\r\n      description: '',\r\n      address: result.address + ' ' + result.city + ' ' + result.state + ' ' + result.country,\r\n      phone: result.phone,\r\n      email: result.email,\r\n      whatsapp: result.phone,\r\n      shopname: result.shopname,\r\n      userid: result._id\r\n    };\r\n    console.log(this.user)\r\n\r\n  }\r\n  loadMap() {\r\n\r\n    var location = JSON.parse(localStorage.getItem('location'))\r\n\r\n    console.log(typeof (location.latitude))\r\n\r\n    let mapOptions: GoogleMapOptions = {\r\n      camera: {\r\n        target: {\r\n          lat: location.latitude,\r\n          lng: location.longitude\r\n        },\r\n        zoom: 16,\r\n        tilt: 30\r\n      }\r\n    };\r\n\r\n    this.map = GoogleMaps.create('map_canvas', mapOptions);\r\n\r\n    // Wait the MAP_READY before using any methods.\r\n    this.map.one(GoogleMapsEvent.MAP_READY)\r\n      .then(() => {\r\n        console.log('Map is ready!');\r\n\r\n        // Now you can use all methods safely.\r\n        this.map.addMarker({\r\n          title: this.user.shopname,\r\n          icon: 'red',\r\n          animation: 'BOUONCE',\r\n          position: {\r\n            lat: location.latitude,\r\n            lng: location.longitude\r\n          }\r\n        })\r\n          .then(marker => {\r\n            marker.on(GoogleMapsEvent.MARKER_CLICK)\r\n              .subscribe(() => {\r\n                alert(this.user.shopname);\r\n              });\r\n          });\r\n\r\n      });\r\n  }\r\n  goToReview() {\r\n\r\n\r\n    this.navCtrl.push(\"ReviewPage\", { id: this.user.userid })\r\n  }\r\n  openChat(item) {\r\n    this.navCtrl.push('ChatPage', item);\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/profile/profile.ts"],"sourceRoot":""}